diff --git a/.gitignore b/.gitignore
index de1cc02..22bc1a0 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,6 +1,67 @@
+############
+# Specific #
+############
+*.root
+*.out
 
-# Precompiled python
-*.pyc
+############
+# Archives #
+############
+Arc*
+.Arc*
+
+###################
+# Compiled source #
+###################
+*.com
+*.class
+*.dll
+*.exe
+*.o
+*.so
+ 
+############
+# Packages #
+############
+# it's better to unpack these files and commit the raw source
+# git has its own built in compression methods
+*.7z
+*.dmg
+#*.gz
+*.iso
+*.jar
+*.rar
+#*.tar
+*.zip
+
+######################
+# Logs and databases #
+######################
+*.log
+*.sql
+*.sqlite
+
+######################
+# OS generated files #
+######################
+.DS_Store
+.DS_Store?
+#._*
+.Spotlight-V100
+.Trashes
+ehthumbs.db
+Thumbs.db
+
+#########
+# PLOTS #
+#########
+*.png
+*.eps
+
+#####################
+# Eclipse IDE files #
+#####################
+.settings
+.project
+.cprogect
 
-# Crab stuff
-FlatTreeProducer/test/PROD/crab_*
diff --git a/FlatTreeProducer/plugins/FlatTreeProducer.cc b/FlatTreeProducer/plugins/FlatTreeProducer.cc
index 7451b0e..ae3ff41 100644
--- a/FlatTreeProducer/plugins/FlatTreeProducer.cc
+++ b/FlatTreeProducer/plugins/FlatTreeProducer.cc
@@ -883,7 +883,7 @@ void FlatTreeProducer::analyze(const edm::Event& iEvent, const edm::EventSetup&
    
    // Pile-up
    edm::Handle<std::vector< PileupSummaryInfo> > pileupInfo;
-   if( !isData_ ) iEvent.getByLabel("addPileupInfo",pileupInfo);
+   if( !isData_ ) iEvent.getByLabel("slimmedAddPileupInfo",pileupInfo);
    
    // Rho info
    edm::Handle<double> rhoPtr;
@@ -991,6 +991,8 @@ void FlatTreeProducer::analyze(const edm::Event& iEvent, const edm::EventSetup&
    ftree->ev_id = iEvent.id().event();
    ftree->ev_lumi = iEvent.id().luminosityBlock();
 
+   //std::cout << iEvent.id().event() << std::endl ;
+
    // ##########################################################
    // #   ___       _ _   _       _         _        _         #
    // #  |_ _|_ __ (_) |_(_) __ _| |    ___| |_ __ _| |_ ___   #
@@ -1444,336 +1446,352 @@ void FlatTreeProducer::analyze(const edm::Event& iEvent, const edm::EventSetup&
    // #################################################
 
    int nElec = electrons->size();
-   
-   for(int ie=0;ie<nElec;ie++)
-     {
-	const pat::Electron& elec = electronsPAT->at(ie);
-
-	// Skimming electrons with pT < 5 GeV.
-	if (elec.pt() < 5) continue;
-	
-        ftree->el_pt.push_back(elec.pt());
-        ftree->el_eta.push_back(elec.eta());
-        ftree->el_phi.push_back(elec.phi());
-        ftree->el_m.push_back(elec.mass());
-        ftree->el_E.push_back(elec.energy());
-        ftree->el_id.push_back(elec.pdgId());
-        ftree->el_charge.push_back(elec.charge());
-
-        ftree->el_isGsfCtfScPixChargeConsistent.push_back(elec.isGsfCtfScPixChargeConsistent());
-        ftree->el_hadronicOverEm.push_back(elec.hadronicOverEm());
-
-	// IP
-	const reco::GsfTrackRef gsfTrack = elec.gsfTrack();
-	bool hasGsfTrack = ( gsfTrack.isNonnull() );
-	ftree->el_hasGsfTrack.push_back(hasGsfTrack);
-	ftree->el_gsfTrack_d0.push_back((hasGsfTrack) ? gsfTrack->d0() : -666);
-	ftree->el_gsfTrack_z0.push_back((hasGsfTrack) ? gsfTrack->dz() : -666);
-	ftree->el_gsfTrack_d0Error.push_back((hasGsfTrack) ? gsfTrack->d0Error() : -666);
-	ftree->el_gsfTrack_z0Error.push_back((hasGsfTrack) ? gsfTrack->dzError() : -666);
-	ftree->el_gsfTrack_PV_dxy.push_back((hasGsfTrack) ? gsfTrack->dxy(primVtx->position()) : -666);
-	ftree->el_gsfTrack_PV_dz.push_back((hasGsfTrack) ? gsfTrack->dz(primVtx->position()) : -666);	
-	ftree->el_gsfTrack_RP_dxy.push_back((hasGsfTrack) ? gsfTrack->dxy(gsfTrack->referencePoint()) : -666);
-	ftree->el_gsfTrack_RP_dz.push_back((hasGsfTrack) ? gsfTrack->dz(gsfTrack->referencePoint()) : -666);
-	ftree->el_gsfTrack_BS_dxy.push_back((hasGsfTrack) ? gsfTrack->dxy(beamspot.position()) : -666);
-	ftree->el_gsfTrack_BS_dz.push_back((hasGsfTrack) ? gsfTrack->dz(beamspot.position()) : -666);	
-	ftree->el_gsfTrack_dxyError.push_back((hasGsfTrack) ? gsfTrack->dxyError() : -666);
-	ftree->el_gsfTrack_dzError.push_back((hasGsfTrack) ? gsfTrack->dzError() : -666);	
-	ftree->el_gsfTrack_normalizedChi2.push_back((hasGsfTrack) ? gsfTrack->normalizedChi2() : -666);	
-
-        ftree->el_ip3d.push_back(elec.dB(pat::Electron::PV3D));
-        ftree->el_ip3dErr.push_back(elec.edB(pat::Electron::PV3D));
-        ftree->el_ip2d.push_back(elec.dB(pat::Electron::PV2D));
-        ftree->el_ip2dErr.push_back(elec.edB(pat::Electron::PV2D));
-        ftree->el_ip3dBS.push_back(elec.dB(pat::Electron::BS3D));
-        ftree->el_ip3dBSErr.push_back(elec.edB(pat::Electron::BS3D));
-        ftree->el_ip2dBS.push_back(elec.dB(pat::Electron::BS2D));
-        ftree->el_ip2dBSErr.push_back(elec.edB(pat::Electron::BS2D));
-
-	// Energy cluster
-	ftree->el_superCluster_eta.push_back(elec.superCluster()->eta());
-	ftree->el_superCluster_phi.push_back(elec.superCluster()->phi());
-	ftree->el_superCluster_energy.push_back(elec.superCluster()->energy());
-	ftree->el_superCluster_rawEnergy.push_back(elec.superCluster()->rawEnergy());
-	ftree->el_superCluster_preshowerEnergy.push_back(elec.superCluster()->preshowerEnergy());
-	ftree->el_superCluster_etaWidth.push_back(elec.superCluster()->etaWidth());
-	ftree->el_superCluster_phiWidth.push_back(elec.superCluster()->phiWidth());
-	ftree->el_superCluster_preshowerEnergyPlane1.push_back(elec.superCluster()->preshowerEnergyPlane1());
-	ftree->el_superCluster_preshowerEnergyPlane2.push_back(elec.superCluster()->preshowerEnergyPlane2());
-	ftree->el_superCluster_positionR.push_back(elec.superCluster()->position().R());
-	
-	ftree->el_basicClustersSize.push_back(elec.basicClustersSize());
-	ftree->el_e1x5.push_back(elec.e1x5());
-	ftree->el_e5x5.push_back(elec.e5x5());
-	ftree->el_e2x5Max.push_back(elec.e2x5Max());
-	ftree->el_sigmaEtaEta.push_back(elec.sigmaEtaEta());
-	ftree->el_sigmaIetaIeta.push_back(elec.sigmaIetaIeta());
-	ftree->el_sigmaIphiIphi.push_back(elec.sigmaIphiIphi());
-	ftree->el_sigmaIetaIphi.push_back(elec.sigmaIetaIphi());
-	ftree->el_full5x5_sigmaIphiIphi.push_back(elec.full5x5_sigmaIphiIphi());
-	ftree->el_full5x5_sigmaEtaEta.push_back(elec.full5x5_sigmaEtaEta());
-	ftree->el_full5x5_sigmaIetaIeta.push_back(elec.full5x5_sigmaIetaIeta());
-	ftree->el_full5x5_sigmaIetaIphi.push_back(elec.full5x5_sigmaIetaIphi());
-	ftree->el_full5x5_r9.push_back(elec.full5x5_r9());
-	ftree->el_full5x5_e1x5.push_back(elec.full5x5_e1x5());
-	ftree->el_full5x5_e5x5.push_back(elec.full5x5_e5x5());
-	ftree->el_full5x5_e2x5Max.push_back(elec.full5x5_e2x5Max());
-
-	double OneMinusE1x5E5x5 = (elec.e5x5() != 0.) ? 1.-(elec.e1x5()/elec.e5x5()) : -1.;
-	double full5x5_OneMinusE1x5E5x5 = (elec.full5x5_e5x5() != 0.) ? 1.-(elec.full5x5_e1x5()/elec.full5x5_e5x5()) : -1.;
-
-        ftree->el_full5x5_OneMinusE1x5E5x5.push_back(full5x5_OneMinusE1x5E5x5);
-        ftree->el_OneMinusE1x5E5x5.push_back(OneMinusE1x5E5x5);
-
-        double IoEmIoP = (1.0/elec.ecalEnergy())-(1.0/elec.p());
-        ftree->el_IoEmIoP.push_back(IoEmIoP);
-        ftree->el_eleEoPout.push_back(elec.eEleClusterOverPout());
-        double PreShowerOverRaw = elec.superCluster()->preshowerEnergy()/elec.superCluster()->rawEnergy();
-        ftree->el_PreShowerOverRaw.push_back(PreShowerOverRaw);	
-	double ooEmooP = fabs(1.0/elec.ecalEnergy()-elec.eSuperClusterOverP()/elec.ecalEnergy());
-	ftree->el_ooEmooP.push_back(ooEmooP);
-	
-	// Track hits
-	const reco::HitPattern& pattern = gsfTrack->hitPattern();	
-	ftree->el_numberOfLostHits.push_back(pattern.numberOfLostHits(reco::HitPattern::HitCategory::MISSING_INNER_HITS));
-	ftree->el_expectedMissingInnerHits.push_back(pattern.numberOfHits(reco::HitPattern::MISSING_INNER_HITS));
-	ftree->el_numberOfHits.push_back(pattern.numberOfHits(reco::HitPattern::HitCategory::MISSING_INNER_HITS));
-
-	ftree->el_expectedMissingOuterHits.push_back(pattern.numberOfHits(reco::HitPattern::MISSING_OUTER_HITS));
-	ftree->el_numberOfValidPixelHits.push_back(pattern.numberOfValidPixelHits());
-	ftree->el_numberOfLostPixelHits.push_back(pattern.numberOfLostPixelHits(reco::HitPattern::TRACK_HITS));
-	ftree->el_trackerLayersWithMeasurement.push_back(pattern.trackerLayersWithMeasurement());
-	ftree->el_pixelLayersWithMeasurement.push_back(pattern.pixelLayersWithMeasurement());
-	ftree->el_numberOfValidStripLayersWithMonoAndStereo.push_back(pattern.numberOfValidStripLayersWithMonoAndStereo());
-	ftree->el_trackerLayersWithoutMeasurement.push_back(pattern.trackerLayersWithoutMeasurement(reco::HitPattern::TRACK_HITS));
-	
-	ftree->el_numberOfValidHits.push_back((hasGsfTrack) ? gsfTrack->numberOfValidHits() : -666);
-	ftree->el_numberOfLostHitsDefault.push_back((hasGsfTrack) ? gsfTrack->numberOfLostHits() : -666);
-	
-	ftree->el_fbrem.push_back(elec.fbrem());
-
-        ftree->el_deltaEtaSuperClusterTrackAtVtx.push_back(elec.deltaEtaSuperClusterTrackAtVtx());
-        ftree->el_deltaPhiSuperClusterTrackAtVtx.push_back(elec.deltaPhiSuperClusterTrackAtVtx());
-        ftree->el_deltaEtaSeedClusterTrackAtCalo.push_back(elec.deltaEtaSeedClusterTrackAtCalo());
-	ftree->el_deltaPhiSeedClusterTrackAtCalo.push_back(elec.deltaPhiSeedClusterTrackAtCalo());
-        ftree->el_eSuperClusterOverP.push_back(elec.eSuperClusterOverP());
-	
-	const auto el = electrons->ptrAt(ie);
-	ftree->el_mvaNonTrigV0.push_back((*mvaValues)[el]);
-	ftree->el_mvaNonTrigCat.push_back((*mvaCategories)[el]);
-	
-	ftree->el_mediumMVAId.push_back((*medium_mvaid_decisions)[el]);
-	ftree->el_tightMVAId.push_back((*tight_mvaid_decisions)[el]);
-	
-	ftree->el_vetoCBId.push_back((*veto_cbid_decisions)[el]);
-	ftree->el_looseCBId.push_back((*loose_cbid_decisions)[el]);
-	ftree->el_mediumCBId.push_back((*medium_cbid_decisions)[el]);
-	ftree->el_tightCBId.push_back((*tight_cbid_decisions)[el]);
-	ftree->el_heepCBId.push_back((*heep_cbid_decisions)[el]);
-
-	ftree->el_ecalEnergy.push_back(elec.ecalEnergy());
-	ftree->el_correctedEcalEnergy.push_back(elec.correctedEcalEnergy());
-	ftree->el_correctedEcalEnergyError.push_back(elec.correctedEcalEnergyError());
-	ftree->el_trackMomentumError.push_back(elec.trackMomentumError());
-	
-	ftree->el_hcalOverEcal.push_back(elec.hcalOverEcal());
-	ftree->el_hcalOverEcalBc.push_back(elec.hcalOverEcalBc());
-	ftree->el_hcalDepth1OverEcal.push_back(elec.hcalDepth1OverEcal());
-	ftree->el_hcalDepth2OverEcal.push_back(elec.hcalDepth2OverEcal());
-	ftree->el_eSeedClusterOverPout.push_back(elec.eSeedClusterOverPout());
-	ftree->el_eSeedClusterOverP.push_back(elec.eSeedClusterOverP());
-	ftree->el_eEleClusterOverPout.push_back(elec.eEleClusterOverPout());
-	ftree->el_deltaEtaEleClusterTrackAtCalo.push_back(elec.deltaEtaEleClusterTrackAtCalo());
-	ftree->el_deltaPhiEleClusterTrackAtCalo.push_back(elec.deltaPhiEleClusterTrackAtCalo());
-		
-        ftree->el_neutralHadronIso.push_back(elec.neutralHadronIso());
-        ftree->el_chargedHadronIso.push_back(elec.chargedHadronIso());
-        ftree->el_puChargedHadronIso.push_back(elec.puChargedHadronIso());
-        ftree->el_ecalIso.push_back(elec.ecalIso());
-        ftree->el_hcalIso.push_back(elec.hcalIso());
-        ftree->el_particleIso.push_back(elec.particleIso());
-        ftree->el_photonIso.push_back(elec.photonIso());
-        ftree->el_trackIso.push_back(elec.trackIso());
-
-        ftree->el_pfIso_sumChargedHadronPt.push_back(elec.pfIsolationVariables().sumChargedHadronPt);
-        ftree->el_pfIso_sumNeutralHadronEt.push_back(elec.pfIsolationVariables().sumNeutralHadronEt);
-        ftree->el_pfIso_sumPhotonEt.push_back(elec.pfIsolationVariables().sumPhotonEt);
-        ftree->el_pfIso_sumPUPt.push_back(elec.pfIsolationVariables().sumPUPt);
-	
-	ftree->el_ecalPFClusterIso.push_back(elec.ecalPFClusterIso());
-	ftree->el_hcalPFClusterIso.push_back(elec.hcalPFClusterIso());
-
-	ftree->el_dr03EcalRecHitSumEt.push_back(elec.dr03EcalRecHitSumEt());
-	ftree->el_dr03HcalTowerSumEt.push_back(elec.dr03HcalTowerSumEt());
-	ftree->el_dr03HcalDepth1TowerSumEt.push_back(elec.dr03HcalDepth1TowerSumEt());
-	ftree->el_dr03HcalDepth2TowerSumEt.push_back(elec.dr03HcalDepth2TowerSumEt());
-	ftree->el_dr03TkSumPt.push_back(elec.dr03TkSumPt());
-
-	ftree->el_dr04EcalRecHitSumEt.push_back(elec.dr04EcalRecHitSumEt());
-	ftree->el_dr04HcalTowerSumEt.push_back(elec.dr04HcalTowerSumEt());
-	ftree->el_dr04HcalDepth1TowerSumEt.push_back(elec.dr04HcalDepth1TowerSumEt());
-	ftree->el_dr04HcalDepth2TowerSumEt.push_back(elec.dr04HcalDepth2TowerSumEt());
-	ftree->el_dr04TkSumPt.push_back(elec.dr04TkSumPt());
-	
-	// mini-iso
-	float miniIso = -666;
-	float miniIsoTTH = -666;
-	float miniIsoTTHCharged = -666;
-	float miniIsoTTHNeutral = -666;
-	if( dataFormat_ != "AOD" )
-	  {
-	     float miniIsoR = 10.0/std::min(std::max(float(elec.pt()),float(50.)),float(200.));
-	     float EffArea = 0.;
-	     float eta = elec.eta();
-	     if( fabs(eta) > 0 && fabs(eta) < 1.0 ) EffArea = 0.1752;
-	     else if( fabs(eta) >= 1.0 && fabs(eta) < 1.479 ) EffArea = 0.1862;
-	     else if( fabs(eta) >= 1.479 && fabs(eta) < 2.0 ) EffArea = 0.1411;
-	     else if( fabs(eta) >= 2.0 && fabs(eta) < 2.2 ) EffArea = 0.1534;
-	     else if( fabs(eta) >= 2.2 && fabs(eta) < 2.3 ) EffArea = 0.1903;
-	     else if( fabs(eta) >= 2.3 && fabs(eta) < 2.4 ) EffArea = 0.2243;
-	     else if( fabs(eta) >= 2.4 && fabs(eta) < 2.5 ) EffArea = 0.2687;
-	     float correction = ftree->ev_rho*EffArea*(miniIsoR/0.3)*(miniIsoR/0.3);
-	     miniIso = getPFIsolation(pfcands,dynamic_cast<const reco::Candidate*>(&elec),0.05,0.2,10.,false,false);
-	     float pfIsoCharged = ElecPfIsoCharged(elec,pfcands,miniIsoR);
-	     float pfIsoNeutral = ElecPfIsoNeutral(elec,pfcands,miniIsoR);
-	     float pfIsoPUSubtracted = std::max(float(0.0),float(pfIsoNeutral-correction));
-	     miniIsoTTH = (pfIsoCharged + pfIsoPUSubtracted)/elec.pt();
-	     miniIsoTTHCharged = pfIsoCharged;
-	     miniIsoTTHNeutral = pfIsoNeutral;
-	  }
-	ftree->el_miniIso.push_back(miniIso);
-	ftree->el_miniIsoTTH.push_back(miniIsoTTH);
-
-        ftree->el_vx.push_back(elec.vx());
-        ftree->el_vy.push_back(elec.vy());
-        ftree->el_vz.push_back(elec.vz());
-
-        ftree->el_hasGsfTrack.push_back(hasGsfTrack);
-	
-        ftree->el_passConversionVeto.push_back(elec.passConversionVeto());
-
-	double el_pt = elec.pt();
-	double el_eta = elec.eta();
-	double el_phi = elec.phi();
-	double el_lepMVA = -666.;
-
-	float drmin = 0.5;
-	int jcl = -1;
-	for(unsigned int ij=0;ij<jets->size();ij++)
-	  {	     
-	     if( jets->at(ij).pt() < 10. ) continue;
-	     float dr = GetDeltaR(jets->at(ij).eta(),
-				  jets->at(ij).phi(),
-				  el_eta,
-				  el_phi);
-	     if( dr < drmin )
-	       {		  
-		  drmin = dr;
-		  jcl = ij;
-	       }	     
-	  }	
-	
-	lepMVA_pt = el_pt;
-	lepMVA_miniRelIsoNeutral = miniIsoTTHNeutral;
-	lepMVA_miniRelIsoCharged = miniIsoTTHCharged;
-	lepMVA_jetPtRatio = (jcl >= 0) ? std::min(el_pt/jets->at(jcl).pt(),1.5) : 1.5;
-	lepMVA_jetPtRelv2 = (jcl >= 0) ? ptRelElec(elec,jets->at(jcl)) : 0.0;
-	float csv = (jcl >= 0) ? jets->at(jcl).bDiscriminator("pfCombinedInclusiveSecondaryVertexV2BJetTags") : -666;
-	lepMVA_jetBTagCSV = std::max(double(csv),0.);
-	lepMVA_sip3d = fabs(ftree->el_ip3d.back()/ftree->el_ip3dErr.back());
-	lepMVA_dxy = log(fabs(ftree->el_gsfTrack_PV_dxy.back()));
-	lepMVA_dz = log(fabs(ftree->el_gsfTrack_PV_dz.back()));
-	lepMVA_mvaId = ftree->el_mvaNonTrigV0.back();
-
-	float el_scleta = ftree->el_superCluster_eta.back();
-	if( fabs(el_scleta) < 0.8 ) el_lepMVA = ele_reader_cb->EvaluateMVA("BDTG method");
-	else if( fabs(el_scleta) >= 0.8 && fabs(el_scleta) < 1.479 ) el_lepMVA = ele_reader_fb->EvaluateMVA("BDTG method");
-	else el_lepMVA = ele_reader_ec->EvaluateMVA("BDTG method");
-	
-	ftree->el_lepMVA.push_back(el_lepMVA);
-
-	if( !isData_ )
-	  {
-	     // Internal matching
-	     reco::GenParticle *genp = new reco::GenParticle();
-
-	     float drmin;
-	     bool hasMCMatch = mc_truth->doMatch(iEvent,iSetup,genParticlesHandle,genp,drmin,
-						 elec.pt(),elec.eta(),elec.phi(),elec.pdgId());
-	     ftree->el_hasMCMatch.push_back(hasMCMatch);
-	     if( hasMCMatch )
-	       {
-		  ftree->el_gen_pt.push_back(genp->pt());
-		  ftree->el_gen_eta.push_back(genp->eta());
-		  ftree->el_gen_phi.push_back(genp->phi());
-		  ftree->el_gen_m.push_back(genp->mass());
-		  ftree->el_gen_status.push_back(genp->status());
-		  ftree->el_gen_id.push_back(genp->pdgId());
-		  ftree->el_gen_charge.push_back(genp->charge());
-		  ftree->el_gen_dr.push_back(drmin);
-	       }	     
-	     else
-	       {
-		  ftree->el_gen_pt.push_back(-666);
-		  ftree->el_gen_eta.push_back(-666);
-		  ftree->el_gen_phi.push_back(-666);
-		  ftree->el_gen_m.push_back(-666);
-		  ftree->el_gen_status.push_back(-666);
-		  ftree->el_gen_id.push_back(-666);
-		  ftree->el_gen_charge.push_back(-666);
-		  ftree->el_gen_dr.push_back(-666);
-	       }	     
-	     delete genp;
-	     
-	     // PAT matching
-	     const reco::GenParticle *genpPAT = elec.genParticle();
-	     bool hasMCMatchPAT = (genpPAT != 0);
-	     ftree->el_hasMCMatchPAT.push_back(hasMCMatchPAT);
-	     if( hasMCMatchPAT )
-	       {
-		  ftree->el_genPAT_pt.push_back(genpPAT->pt());
-		  ftree->el_genPAT_eta.push_back(genpPAT->eta());
-		  ftree->el_genPAT_phi.push_back(genpPAT->phi());
-		  ftree->el_genPAT_m.push_back(genpPAT->mass());
-		  ftree->el_genPAT_status.push_back(genpPAT->status());
-		  ftree->el_genPAT_id.push_back(genpPAT->pdgId());
-		  ftree->el_genPAT_charge.push_back(genpPAT->charge());
-	       }	     
-	     else
-	       {
-		  ftree->el_genPAT_pt.push_back(-666);
-		  ftree->el_genPAT_eta.push_back(-666);
-		  ftree->el_genPAT_phi.push_back(-666);
-		  ftree->el_genPAT_m.push_back(-666);
-		  ftree->el_genPAT_status.push_back(-666);
-		  ftree->el_genPAT_id.push_back(-666);
-		  ftree->el_genPAT_charge.push_back(-666);
-	       }	     
-	  }
 
-	ftree->el_lepMVA_pt.push_back(lepMVA_pt);
-        ftree->el_lepMVA_miniRelIsoCharged.push_back(lepMVA_miniRelIsoCharged);
-        ftree->el_lepMVA_miniRelIsoNeutral.push_back(lepMVA_miniRelIsoNeutral);
-        ftree->el_lepMVA_jetPtRatio.push_back(lepMVA_jetPtRatio);
-	ftree->el_lepMVA_jetPtRelv2.push_back(lepMVA_jetPtRelv2);
-        ftree->el_lepMVA_jetBTagCSV.push_back(lepMVA_jetBTagCSV);
-        ftree->el_lepMVA_sip3d.push_back(lepMVA_sip3d);
-	ftree->el_lepMVA_dxy.push_back(lepMVA_dxy);
-	ftree->el_lepMVA_dz.push_back(lepMVA_dz);
-        ftree->el_lepMVA_mvaId.push_back(lepMVA_mvaId);
-
-	bool allowCkfMatch = true;
-	float lxyMin = 2.0;
-	float probMin = 1e-6;
-	uint nHitsBeforeVtxMax = 0;
-
-	if( dataFormat_ != "AOD" )
-	  {	     
-	     bool matchConv = 0;
-	     if( &beamspot ) matchConv = ConversionTools::hasMatchedConversion(elec,hConversions,beamspot.position(),allowCkfMatch,lxyMin,probMin,nHitsBeforeVtxMax);
-	     ftree->el_hasMatchedConversion.push_back(matchConv);
-	  }	
-     }   
+   for(int ie=0;ie<nElec;ie++)
+   {
+       const pat::Electron& elec = electronsPAT->at(ie);
+
+       // Skimming electrons with pT < 5 GeV.
+       if (elec.pt() < 5) continue;
+
+       ftree->el_pt.push_back(elec.pt());
+       ftree->el_eta.push_back(elec.eta());
+       ftree->el_phi.push_back(elec.phi());
+       ftree->el_m.push_back(elec.mass());
+       ftree->el_E.push_back(elec.energy());
+       ftree->el_id.push_back(elec.pdgId());
+       ftree->el_charge.push_back(elec.charge());
+
+       ftree->el_isGsfCtfScPixChargeConsistent.push_back(elec.isGsfCtfScPixChargeConsistent());
+       ftree->el_hadronicOverEm.push_back(elec.hadronicOverEm());
+
+       // IP
+       const reco::GsfTrackRef gsfTrack = elec.gsfTrack();
+       bool hasGsfTrack = ( gsfTrack.isNonnull() );
+       ftree->el_hasGsfTrack.push_back(hasGsfTrack);
+       ftree->el_gsfTrack_d0.push_back((hasGsfTrack) ? gsfTrack->d0() : -666);
+       ftree->el_gsfTrack_z0.push_back((hasGsfTrack) ? gsfTrack->dz() : -666);
+       ftree->el_gsfTrack_d0Error.push_back((hasGsfTrack) ? gsfTrack->d0Error() : -666);
+       ftree->el_gsfTrack_z0Error.push_back((hasGsfTrack) ? gsfTrack->dzError() : -666);
+       ftree->el_gsfTrack_PV_dxy.push_back((hasGsfTrack) ? gsfTrack->dxy(primVtx->position()) : -666);
+       ftree->el_gsfTrack_PV_dz.push_back((hasGsfTrack) ? gsfTrack->dz(primVtx->position()) : -666);	
+       ftree->el_gsfTrack_RP_dxy.push_back((hasGsfTrack) ? gsfTrack->dxy(gsfTrack->referencePoint()) : -666);
+       ftree->el_gsfTrack_RP_dz.push_back((hasGsfTrack) ? gsfTrack->dz(gsfTrack->referencePoint()) : -666);
+       ftree->el_gsfTrack_BS_dxy.push_back((hasGsfTrack) ? gsfTrack->dxy(beamspot.position()) : -666);
+       ftree->el_gsfTrack_BS_dz.push_back((hasGsfTrack) ? gsfTrack->dz(beamspot.position()) : -666);	
+       ftree->el_gsfTrack_dxyError.push_back((hasGsfTrack) ? gsfTrack->dxyError() : -666);
+       ftree->el_gsfTrack_dzError.push_back((hasGsfTrack) ? gsfTrack->dzError() : -666);	
+       ftree->el_gsfTrack_normalizedChi2.push_back((hasGsfTrack) ? gsfTrack->normalizedChi2() : -666);	
+
+       ftree->el_ip3d.push_back(elec.dB(pat::Electron::PV3D));
+       ftree->el_ip3dErr.push_back(elec.edB(pat::Electron::PV3D));
+       ftree->el_ip2d.push_back(elec.dB(pat::Electron::PV2D));
+       ftree->el_ip2dErr.push_back(elec.edB(pat::Electron::PV2D));
+       ftree->el_ip3dBS.push_back(elec.dB(pat::Electron::BS3D));
+       ftree->el_ip3dBSErr.push_back(elec.edB(pat::Electron::BS3D));
+       ftree->el_ip2dBS.push_back(elec.dB(pat::Electron::BS2D));
+       ftree->el_ip2dBSErr.push_back(elec.edB(pat::Electron::BS2D));
+
+       // Energy cluster
+       ftree->el_superCluster_eta.push_back(elec.superCluster()->eta());
+       ftree->el_superCluster_phi.push_back(elec.superCluster()->phi());
+       ftree->el_superCluster_energy.push_back(elec.superCluster()->energy());
+       ftree->el_superCluster_rawEnergy.push_back(elec.superCluster()->rawEnergy());
+       ftree->el_superCluster_preshowerEnergy.push_back(elec.superCluster()->preshowerEnergy());
+       ftree->el_superCluster_etaWidth.push_back(elec.superCluster()->etaWidth());
+       ftree->el_superCluster_phiWidth.push_back(elec.superCluster()->phiWidth());
+       ftree->el_superCluster_preshowerEnergyPlane1.push_back(elec.superCluster()->preshowerEnergyPlane1());
+       ftree->el_superCluster_preshowerEnergyPlane2.push_back(elec.superCluster()->preshowerEnergyPlane2());
+       ftree->el_superCluster_positionR.push_back(elec.superCluster()->position().R());
+
+       ftree->el_basicClustersSize.push_back(elec.basicClustersSize());
+       ftree->el_e1x5.push_back(elec.e1x5());
+       ftree->el_e5x5.push_back(elec.e5x5());
+       ftree->el_e2x5Max.push_back(elec.e2x5Max());
+       ftree->el_sigmaEtaEta.push_back(elec.sigmaEtaEta());
+       ftree->el_sigmaIetaIeta.push_back(elec.sigmaIetaIeta());
+       ftree->el_sigmaIphiIphi.push_back(elec.sigmaIphiIphi());
+       ftree->el_sigmaIetaIphi.push_back(elec.sigmaIetaIphi());
+       ftree->el_full5x5_sigmaIphiIphi.push_back(elec.full5x5_sigmaIphiIphi());
+       ftree->el_full5x5_sigmaEtaEta.push_back(elec.full5x5_sigmaEtaEta());
+       ftree->el_full5x5_sigmaIetaIeta.push_back(elec.full5x5_sigmaIetaIeta());
+       ftree->el_full5x5_sigmaIetaIphi.push_back(elec.full5x5_sigmaIetaIphi());
+       ftree->el_full5x5_r9.push_back(elec.full5x5_r9());
+       ftree->el_full5x5_e1x5.push_back(elec.full5x5_e1x5());
+       ftree->el_full5x5_e5x5.push_back(elec.full5x5_e5x5());
+       ftree->el_full5x5_e2x5Max.push_back(elec.full5x5_e2x5Max());
+
+       double OneMinusE1x5E5x5 = (elec.e5x5() != 0.) ? 1.-(elec.e1x5()/elec.e5x5()) : -1.;
+       double full5x5_OneMinusE1x5E5x5 = (elec.full5x5_e5x5() != 0.) ? 1.-(elec.full5x5_e1x5()/elec.full5x5_e5x5()) : -1.;
+
+       ftree->el_full5x5_OneMinusE1x5E5x5.push_back(full5x5_OneMinusE1x5E5x5);
+       ftree->el_OneMinusE1x5E5x5.push_back(OneMinusE1x5E5x5);
+
+       double IoEmIoP = (1.0/elec.ecalEnergy())-(1.0/elec.p());
+       ftree->el_IoEmIoP.push_back(IoEmIoP);
+       ftree->el_eleEoPout.push_back(elec.eEleClusterOverPout());
+       double PreShowerOverRaw = elec.superCluster()->preshowerEnergy()/elec.superCluster()->rawEnergy();
+       ftree->el_PreShowerOverRaw.push_back(PreShowerOverRaw);	
+       double ooEmooP = fabs(1.0/elec.ecalEnergy()-elec.eSuperClusterOverP()/elec.ecalEnergy());
+       ftree->el_ooEmooP.push_back(ooEmooP);
+
+       // Track hits
+       const reco::HitPattern& pattern = gsfTrack->hitPattern();	
+       ftree->el_numberOfLostHits.push_back(pattern.numberOfLostHits(reco::HitPattern::HitCategory::MISSING_INNER_HITS));
+       ftree->el_expectedMissingInnerHits.push_back(pattern.numberOfHits(reco::HitPattern::MISSING_INNER_HITS));
+       ftree->el_numberOfHits.push_back(pattern.numberOfHits(reco::HitPattern::HitCategory::MISSING_INNER_HITS));
+
+       ftree->el_expectedMissingOuterHits.push_back(pattern.numberOfHits(reco::HitPattern::MISSING_OUTER_HITS));
+       ftree->el_numberOfValidPixelHits.push_back(pattern.numberOfValidPixelHits());
+       ftree->el_numberOfLostPixelHits.push_back(pattern.numberOfLostPixelHits(reco::HitPattern::TRACK_HITS));
+       ftree->el_trackerLayersWithMeasurement.push_back(pattern.trackerLayersWithMeasurement());
+       ftree->el_pixelLayersWithMeasurement.push_back(pattern.pixelLayersWithMeasurement());
+       ftree->el_numberOfValidStripLayersWithMonoAndStereo.push_back(pattern.numberOfValidStripLayersWithMonoAndStereo());
+       ftree->el_trackerLayersWithoutMeasurement.push_back(pattern.trackerLayersWithoutMeasurement(reco::HitPattern::TRACK_HITS));
+
+       ftree->el_numberOfValidHits.push_back((hasGsfTrack) ? gsfTrack->numberOfValidHits() : -666);
+       ftree->el_numberOfLostHitsDefault.push_back((hasGsfTrack) ? gsfTrack->numberOfLostHits() : -666);
+
+       ftree->el_fbrem.push_back(elec.fbrem());
+
+       ftree->el_deltaEtaSuperClusterTrackAtVtx.push_back(elec.deltaEtaSuperClusterTrackAtVtx());
+       ftree->el_deltaPhiSuperClusterTrackAtVtx.push_back(elec.deltaPhiSuperClusterTrackAtVtx());
+       ftree->el_deltaEtaSeedClusterTrackAtCalo.push_back(elec.deltaEtaSeedClusterTrackAtCalo());
+       ftree->el_deltaPhiSeedClusterTrackAtCalo.push_back(elec.deltaPhiSeedClusterTrackAtCalo());
+       ftree->el_eSuperClusterOverP.push_back(elec.eSuperClusterOverP());
+
+       const auto el = electrons->ptrAt(ie);
+       ftree->el_mvaNonTrigV0.push_back((*mvaValues)[el]);
+       ftree->el_mvaNonTrigCat.push_back((*mvaCategories)[el]);
+
+       ftree->el_mediumMVAId.push_back((*medium_mvaid_decisions)[el]);
+       ftree->el_tightMVAId.push_back((*tight_mvaid_decisions)[el]);
+
+       ftree->el_vetoCBId.push_back((*veto_cbid_decisions)[el]);
+       ftree->el_looseCBId.push_back((*loose_cbid_decisions)[el]);
+       ftree->el_mediumCBId.push_back((*medium_cbid_decisions)[el]);
+       ftree->el_tightCBId.push_back((*tight_cbid_decisions)[el]);
+       ftree->el_heepCBId.push_back((*heep_cbid_decisions)[el]);
+
+       ftree->el_ecalEnergy.push_back(elec.ecalEnergy());
+       ftree->el_correctedEcalEnergy.push_back(elec.correctedEcalEnergy());
+       ftree->el_correctedEcalEnergyError.push_back(elec.correctedEcalEnergyError());
+       ftree->el_trackMomentumError.push_back(elec.trackMomentumError());
+
+       ftree->el_hcalOverEcal.push_back(elec.hcalOverEcal());
+       ftree->el_hcalOverEcalBc.push_back(elec.hcalOverEcalBc());
+       ftree->el_hcalDepth1OverEcal.push_back(elec.hcalDepth1OverEcal());
+       ftree->el_hcalDepth2OverEcal.push_back(elec.hcalDepth2OverEcal());
+       ftree->el_eSeedClusterOverPout.push_back(elec.eSeedClusterOverPout());
+       ftree->el_eSeedClusterOverP.push_back(elec.eSeedClusterOverP());
+       ftree->el_eEleClusterOverPout.push_back(elec.eEleClusterOverPout());
+       ftree->el_deltaEtaEleClusterTrackAtCalo.push_back(elec.deltaEtaEleClusterTrackAtCalo());
+       ftree->el_deltaPhiEleClusterTrackAtCalo.push_back(elec.deltaPhiEleClusterTrackAtCalo());
+
+       ftree->el_neutralHadronIso.push_back(elec.neutralHadronIso());
+       ftree->el_chargedHadronIso.push_back(elec.chargedHadronIso());
+       ftree->el_puChargedHadronIso.push_back(elec.puChargedHadronIso());
+       ftree->el_ecalIso.push_back(elec.ecalIso());
+       ftree->el_hcalIso.push_back(elec.hcalIso());
+       ftree->el_particleIso.push_back(elec.particleIso());
+       ftree->el_photonIso.push_back(elec.photonIso());
+       ftree->el_trackIso.push_back(elec.trackIso());
+
+       ftree->el_pfIso_sumChargedHadronPt.push_back(elec.pfIsolationVariables().sumChargedHadronPt);
+       ftree->el_pfIso_sumNeutralHadronEt.push_back(elec.pfIsolationVariables().sumNeutralHadronEt);
+       ftree->el_pfIso_sumPhotonEt.push_back(elec.pfIsolationVariables().sumPhotonEt);
+       ftree->el_pfIso_sumPUPt.push_back(elec.pfIsolationVariables().sumPUPt);
+
+       ftree->el_ecalPFClusterIso.push_back(elec.ecalPFClusterIso());
+       ftree->el_hcalPFClusterIso.push_back(elec.hcalPFClusterIso());
+
+       ftree->el_dr03EcalRecHitSumEt.push_back(elec.dr03EcalRecHitSumEt());
+       ftree->el_dr03HcalTowerSumEt.push_back(elec.dr03HcalTowerSumEt());
+       ftree->el_dr03HcalDepth1TowerSumEt.push_back(elec.dr03HcalDepth1TowerSumEt());
+       ftree->el_dr03HcalDepth2TowerSumEt.push_back(elec.dr03HcalDepth2TowerSumEt());
+       ftree->el_dr03TkSumPt.push_back(elec.dr03TkSumPt());
+
+       ftree->el_dr04EcalRecHitSumEt.push_back(elec.dr04EcalRecHitSumEt());
+       ftree->el_dr04HcalTowerSumEt.push_back(elec.dr04HcalTowerSumEt());
+       ftree->el_dr04HcalDepth1TowerSumEt.push_back(elec.dr04HcalDepth1TowerSumEt());
+       ftree->el_dr04HcalDepth2TowerSumEt.push_back(elec.dr04HcalDepth2TowerSumEt());
+       ftree->el_dr04TkSumPt.push_back(elec.dr04TkSumPt());
+
+       // mini-iso
+       float miniIso           = -666;
+       float miniIsoTTH        = -666;
+       float miniIsoTTHCharged = -666;
+       float miniIsoTTHNeutral = -666;
+       
+       if( dataFormat_ != "AOD" )
+       {
+           float miniIsoR = 10.0/std::min(std::max(float(elec.pt()),float(50.)),float(200.));
+           
+           float EffArea = 0.;
+           float eta = elec.eta();
+
+           if(      fabs(eta) > 0      && fabs(eta) < 1.0 )   EffArea = 0.1752;
+           else if( fabs(eta) >= 1.0   && fabs(eta) < 1.479 ) EffArea = 0.1862;
+           else if( fabs(eta) >= 1.479 && fabs(eta) < 2.0 )   EffArea = 0.1411;
+           else if( fabs(eta) >= 2.0   && fabs(eta) < 2.2 )   EffArea = 0.1534;
+           else if( fabs(eta) >= 2.2   && fabs(eta) < 2.3 )   EffArea = 0.1903;
+           else if( fabs(eta) >= 2.3   && fabs(eta) < 2.4 )   EffArea = 0.2243;
+           else if( fabs(eta) >= 2.4   && fabs(eta) < 2.5 )   EffArea = 0.2687;
+           
+           float correction = ftree->ev_rho*EffArea*(miniIsoR/0.3)*(miniIsoR/0.3);
+           
+           miniIso = getPFIsolation(pfcands,dynamic_cast<const reco::Candidate*>(&elec),0.05,0.2,10.,false,false);
+           
+           float pfIsoCharged = ElecPfIsoCharged(elec,pfcands,miniIsoR);
+           float pfIsoNeutral = ElecPfIsoNeutral(elec,pfcands,miniIsoR);
+           float pfIsoPUSubtracted = std::max(float(0.0),float(pfIsoNeutral-correction));
+           
+           //std::cout << "pfIsoCharged = " << pfIsoCharged << "    pfIsoNeutral = " << pfIsoNeutral << "   pfIsoPUSubtracted = " << pfIsoPUSubtracted << std::endl;
+
+           miniIsoTTH        = (pfIsoCharged + pfIsoPUSubtracted)/elec.pt();
+           miniIsoTTHCharged = pfIsoCharged;
+           //miniIsoTTHNeutral = pfIsoPUSubtracted;
+           miniIsoTTHNeutral = pfIsoNeutral;
+       }
+      
+       //std::cout << elec.pt() << "   " << miniIsoTTH << "   " << miniIsoTTHCharged << "  " << miniIsoTTHNeutral << std::endl;
+
+       ftree->el_miniIso.push_back(miniIso);
+       ftree->el_miniIsoTTH.push_back(miniIsoTTH);
+
+       //ftree->el_miniIsoTTHCharged.pushback(miniIsoTTHCharged); //?
+       //ftree->el_miniIsoTTHNeutral.pushback(miniIsoTTHNeutral); //?
+
+       ftree->el_vx.push_back(elec.vx());
+       ftree->el_vy.push_back(elec.vy());
+       ftree->el_vz.push_back(elec.vz());
+
+       ftree->el_hasGsfTrack.push_back(hasGsfTrack);
+
+       ftree->el_passConversionVeto.push_back(elec.passConversionVeto());
+
+       double el_pt = elec.pt();
+       double el_eta = elec.eta();
+       double el_phi = elec.phi();
+       double el_lepMVA = -666.;
+
+       float drmin = 0.5;
+       int jcl = -1;
+       for(unsigned int ij=0;ij<jets->size();ij++)
+       {	     
+           if( jets->at(ij).pt() < 10. ) continue;
+           float dr = GetDeltaR(jets->at(ij).eta(),
+                   jets->at(ij).phi(),
+                   el_eta,
+                   el_phi);
+           if( dr < drmin )
+           {		  
+               drmin = dr;
+               jcl = ij;
+           }	     
+       }	
+
+       lepMVA_pt = el_pt;
+       lepMVA_miniRelIsoNeutral = miniIsoTTHNeutral;
+       lepMVA_miniRelIsoCharged = miniIsoTTHCharged;
+       lepMVA_jetPtRatio = (jcl >= 0) ? std::min(el_pt/jets->at(jcl).pt(),1.5) : 1.5;
+       lepMVA_jetPtRelv2 = (jcl >= 0) ? ptRelElec(elec,jets->at(jcl)) : 0.0;
+       float csv = (jcl >= 0) ? jets->at(jcl).bDiscriminator("pfCombinedInclusiveSecondaryVertexV2BJetTags") : -666;
+       lepMVA_jetBTagCSV = std::max(double(csv),0.);
+       lepMVA_sip3d = fabs(ftree->el_ip3d.back()/ftree->el_ip3dErr.back());
+       lepMVA_dxy = log(fabs(ftree->el_gsfTrack_PV_dxy.back()));
+       lepMVA_dz = log(fabs(ftree->el_gsfTrack_PV_dz.back()));
+       lepMVA_mvaId = ftree->el_mvaNonTrigV0.back();
+
+       float el_scleta = ftree->el_superCluster_eta.back();
+       if( fabs(el_scleta) < 0.8 ) el_lepMVA = ele_reader_cb->EvaluateMVA("BDTG method");
+       else if( fabs(el_scleta) >= 0.8 && fabs(el_scleta) < 1.479 ) el_lepMVA = ele_reader_fb->EvaluateMVA("BDTG method");
+       else el_lepMVA = ele_reader_ec->EvaluateMVA("BDTG method");
+
+       ftree->el_lepMVA.push_back(el_lepMVA);
+
+       if( !isData_ )
+       {
+           // Internal matching
+           reco::GenParticle *genp = new reco::GenParticle();
+
+           float drmin;
+           bool hasMCMatch = mc_truth->doMatch(iEvent,iSetup,genParticlesHandle,genp,drmin,
+                   elec.pt(),elec.eta(),elec.phi(),elec.pdgId());
+           ftree->el_hasMCMatch.push_back(hasMCMatch);
+           if( hasMCMatch )
+           {
+               ftree->el_gen_pt.push_back(genp->pt());
+               ftree->el_gen_eta.push_back(genp->eta());
+               ftree->el_gen_phi.push_back(genp->phi());
+               ftree->el_gen_m.push_back(genp->mass());
+               ftree->el_gen_status.push_back(genp->status());
+               ftree->el_gen_id.push_back(genp->pdgId());
+               ftree->el_gen_charge.push_back(genp->charge());
+               ftree->el_gen_dr.push_back(drmin);
+           }	     
+           else
+           {
+               ftree->el_gen_pt.push_back(-666);
+               ftree->el_gen_eta.push_back(-666);
+               ftree->el_gen_phi.push_back(-666);
+               ftree->el_gen_m.push_back(-666);
+               ftree->el_gen_status.push_back(-666);
+               ftree->el_gen_id.push_back(-666);
+               ftree->el_gen_charge.push_back(-666);
+               ftree->el_gen_dr.push_back(-666);
+           }	     
+           delete genp;
+
+           // PAT matching
+           const reco::GenParticle *genpPAT = elec.genParticle();
+           bool hasMCMatchPAT = (genpPAT != 0);
+           ftree->el_hasMCMatchPAT.push_back(hasMCMatchPAT);
+           if( hasMCMatchPAT )
+           {
+               ftree->el_genPAT_pt.push_back(genpPAT->pt());
+               ftree->el_genPAT_eta.push_back(genpPAT->eta());
+               ftree->el_genPAT_phi.push_back(genpPAT->phi());
+               ftree->el_genPAT_m.push_back(genpPAT->mass());
+               ftree->el_genPAT_status.push_back(genpPAT->status());
+               ftree->el_genPAT_id.push_back(genpPAT->pdgId());
+               ftree->el_genPAT_charge.push_back(genpPAT->charge());
+           }	     
+           else
+           {
+               ftree->el_genPAT_pt.push_back(-666);
+               ftree->el_genPAT_eta.push_back(-666);
+               ftree->el_genPAT_phi.push_back(-666);
+               ftree->el_genPAT_m.push_back(-666);
+               ftree->el_genPAT_status.push_back(-666);
+               ftree->el_genPAT_id.push_back(-666);
+               ftree->el_genPAT_charge.push_back(-666);
+           }	     
+       }
+
+       ftree->el_lepMVA_pt.push_back(lepMVA_pt);
+       ftree->el_lepMVA_miniRelIsoCharged.push_back(lepMVA_miniRelIsoCharged);
+       ftree->el_lepMVA_miniRelIsoNeutral.push_back(lepMVA_miniRelIsoNeutral);
+       ftree->el_lepMVA_jetPtRatio.push_back(lepMVA_jetPtRatio);
+       ftree->el_lepMVA_jetPtRelv2.push_back(lepMVA_jetPtRelv2);
+       ftree->el_lepMVA_jetBTagCSV.push_back(lepMVA_jetBTagCSV);
+       ftree->el_lepMVA_sip3d.push_back(lepMVA_sip3d);
+       ftree->el_lepMVA_dxy.push_back(lepMVA_dxy);
+       ftree->el_lepMVA_dz.push_back(lepMVA_dz);
+       ftree->el_lepMVA_mvaId.push_back(lepMVA_mvaId);
+
+       bool allowCkfMatch = true;
+       float lxyMin = 2.0;
+       float probMin = 1e-6;
+       uint nHitsBeforeVtxMax = 0;
+
+       if( dataFormat_ != "AOD" )
+       {	     
+           bool matchConv = 0;
+           if( &beamspot ) matchConv = ConversionTools::hasMatchedConversion(elec,hConversions,beamspot.position(),allowCkfMatch,lxyMin,probMin,nHitsBeforeVtxMax);
+           ftree->el_hasMatchedConversion.push_back(matchConv);
+       }	
+   }   
    ftree->el_n = ftree->el_pt.size();
 
    // ####################################
@@ -1787,469 +1805,477 @@ void FlatTreeProducer::analyze(const edm::Event& iEvent, const edm::EventSetup&
 
    int nMuon = muons->size();
    for(int im=0;im<nMuon;im++)
-     {
-	const pat::Muon& muon = muons->at(im);
-	
-	// Skimming muons with pT < 5 GeV.
-	if (muon.pt() < 5) continue;
-
-        ftree->mu_pt.push_back(muon.pt());
-        ftree->mu_eta.push_back(muon.eta());
-        ftree->mu_phi.push_back(muon.phi());
-        ftree->mu_m.push_back(muon.mass());
-        ftree->mu_E.push_back(muon.energy());
-        ftree->mu_id.push_back(muon.pdgId());
-        ftree->mu_charge.push_back(muon.charge());
-
-	// IP
-        ftree->mu_ip3d.push_back(muon.dB(pat::Muon::PV3D));
-        ftree->mu_ip3dErr.push_back(muon.edB(pat::Muon::PV3D));
-        ftree->mu_ip2d.push_back(muon.dB(pat::Muon::PV2D));
-        ftree->mu_ip2dErr.push_back(muon.edB(pat::Muon::PV2D));
-        ftree->mu_ip3dBS.push_back(muon.dB(pat::Muon::BS3D));
-        ftree->mu_ip3dBSErr.push_back(muon.edB(pat::Muon::BS3D));
-        ftree->mu_ip2dBS.push_back(muon.dB(pat::Muon::BS2D));
-        ftree->mu_ip2dBSErr.push_back(muon.edB(pat::Muon::BS2D));
-
-	const reco::MuonQuality combQuality = muon.combinedQuality();
-	ftree->mu_combinedQuality_chi2LocalPosition.push_back(combQuality.chi2LocalPosition);
-	ftree->mu_combinedQuality_trkKink.push_back(combQuality.trkKink);
-	
-	ftree->mu_numberOfMatches.push_back(muon.isMatchesValid() ? muon.numberOfMatches() : -666);
-	ftree->mu_numberOfMatchedStations.push_back(muon.numberOfMatchedStations());
-
-	// GlobalTrack
-	const reco::TrackRef globalTrack = muon.globalTrack();
-	bool hasGlobalTrack = globalTrack.isNonnull();
-	
-	ftree->mu_hasGlobalTrack.push_back(hasGlobalTrack);
-	ftree->mu_globalTrack_d0.push_back((hasGlobalTrack) ? globalTrack->d0() : -666);
-	ftree->mu_globalTrack_z0.push_back((hasGlobalTrack) ? globalTrack->dz() : -666);
-	ftree->mu_globalTrack_d0Error.push_back((hasGlobalTrack) ? globalTrack->d0Error() : -666);
-	ftree->mu_globalTrack_z0Error.push_back((hasGlobalTrack) ? globalTrack->dzError() : -666);
-	ftree->mu_globalTrack_PV_dxy.push_back((hasGlobalTrack) ? globalTrack->dxy(primVtx->position()) : -666);
-	ftree->mu_globalTrack_PV_dz.push_back((hasGlobalTrack) ? globalTrack->dz(primVtx->position()) : -666);	
-	ftree->mu_globalTrack_RP_dxy.push_back((hasGlobalTrack) ? globalTrack->dxy(globalTrack->referencePoint()) : -666);
-	ftree->mu_globalTrack_RP_dz.push_back((hasGlobalTrack) ? globalTrack->dz(globalTrack->referencePoint()) : -666);
-	ftree->mu_globalTrack_BS_dxy.push_back((hasGlobalTrack) ? globalTrack->dxy(beamspot.position()) : -666);
-	ftree->mu_globalTrack_BS_dz.push_back((hasGlobalTrack) ? globalTrack->dz(beamspot.position()) : -666);	
-	ftree->mu_globalTrack_dxyError.push_back((hasGlobalTrack) ? globalTrack->dxyError() : -666);
-	ftree->mu_globalTrack_dzError.push_back((hasGlobalTrack) ? globalTrack->dzError() : -666);	
-	ftree->mu_globalTrack_normalizedChi2.push_back((hasGlobalTrack) ? globalTrack->normalizedChi2() : -666);
-	ftree->mu_globalTrack_numberOfValidHits.push_back((hasGlobalTrack) ? globalTrack->numberOfValidHits() : -666);
-	ftree->mu_globalTrack_numberOfLostHits.push_back((hasGlobalTrack) ? globalTrack->numberOfLostHits() : -666);
-	ftree->mu_globalTrack_pt.push_back((hasGlobalTrack) ? globalTrack->pt() : -666);
-	ftree->mu_globalTrack_eta.push_back((hasGlobalTrack) ? globalTrack->eta() : -666);
-	ftree->mu_globalTrack_phi.push_back((hasGlobalTrack) ? globalTrack->phi() : -666);
-	ftree->mu_globalTrack_ptError.push_back((hasGlobalTrack) ? globalTrack->ptError() : -666);
-	ftree->mu_globalTrack_etaError.push_back((hasGlobalTrack) ? globalTrack->etaError() : -666);
-	ftree->mu_globalTrack_phiError.push_back((hasGlobalTrack) ? globalTrack->phiError() : -666);
-	ftree->mu_globalTrack_vx.push_back((hasGlobalTrack) ? globalTrack->vx() : -666);
-	ftree->mu_globalTrack_vy.push_back((hasGlobalTrack) ? globalTrack->vy() : -666);
-	ftree->mu_globalTrack_vz.push_back((hasGlobalTrack) ? globalTrack->vz() : -666);
-	ftree->mu_globalTrack_qoverp.push_back((hasGlobalTrack) ? globalTrack->qoverp() : -666);
-	ftree->mu_globalTrack_qoverpError.push_back((hasGlobalTrack) ? globalTrack->qoverpError() : -666);
-	ftree->mu_globalTrack_charge.push_back((hasGlobalTrack) ? globalTrack->charge() : -666);
-	ftree->mu_globalTrack_trackerLayersWithMeasurement.push_back((hasGlobalTrack) ? globalTrack->hitPattern().trackerLayersWithMeasurement() : -666);
-	ftree->mu_globalTrack_pixelLayersWithMeasurement.push_back((hasGlobalTrack) ? globalTrack->hitPattern().pixelLayersWithMeasurement() : -666);
-	ftree->mu_globalTrack_numberOfValidStripLayersWithMonoAndStereo.push_back((hasGlobalTrack) ? globalTrack->hitPattern().numberOfValidStripLayersWithMonoAndStereo() : -666);
-	ftree->mu_globalTrack_trackerLayersWithoutMeasurement.push_back((hasGlobalTrack) ? globalTrack->hitPattern().trackerLayersWithoutMeasurement(reco::HitPattern::TRACK_HITS) : -666);
-	ftree->mu_globalTrack_numberOfValidPixelHits.push_back((hasGlobalTrack) ? globalTrack->hitPattern().numberOfValidPixelHits() : -666);
-	ftree->mu_globalTrack_numberOfLostPixelHits.push_back((hasGlobalTrack) ? globalTrack->hitPattern().numberOfLostPixelHits(reco::HitPattern::TRACK_HITS) : -666);
-	ftree->mu_globalTrack_numberOfInnerHits.push_back((hasGlobalTrack) ? globalTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_INNER_HITS) : -666);
-	ftree->mu_globalTrack_numberOfOuterHits.push_back((hasGlobalTrack) ? globalTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_OUTER_HITS) : -666);
-	ftree->mu_globalTrack_validFraction.push_back((hasGlobalTrack) ? globalTrack->validFraction() : -666);
-
-	// BestTrack
-	ftree->mu_bestTrackType.push_back(muon.muonBestTrackType());
-	const reco::TrackRef bestTrack = muon.muonBestTrack();
-	bool hasBestTrack = bestTrack.isNonnull();
-	
-	ftree->mu_hasBestTrack.push_back(hasBestTrack);
-	ftree->mu_bestTrack_d0.push_back((hasBestTrack) ? bestTrack->d0() : -666);
-	ftree->mu_bestTrack_z0.push_back((hasBestTrack) ? bestTrack->dz() : -666);
-	ftree->mu_bestTrack_d0Error.push_back((hasBestTrack) ? bestTrack->d0Error() : -666);
-	ftree->mu_bestTrack_z0Error.push_back((hasBestTrack) ? bestTrack->dzError() : -666);
-	ftree->mu_bestTrack_PV_dxy.push_back((hasBestTrack) ? bestTrack->dxy(primVtx->position()) : -666);
-	ftree->mu_bestTrack_PV_dz.push_back((hasBestTrack) ? bestTrack->dz(primVtx->position()) : -666);	
-	ftree->mu_bestTrack_RP_dxy.push_back((hasBestTrack) ? bestTrack->dxy(bestTrack->referencePoint()) : -666);
-	ftree->mu_bestTrack_RP_dz.push_back((hasBestTrack) ? bestTrack->dz(bestTrack->referencePoint()) : -666);
-	ftree->mu_bestTrack_BS_dxy.push_back((hasBestTrack) ? bestTrack->dxy(beamspot.position()) : -666);
-	ftree->mu_bestTrack_BS_dz.push_back((hasBestTrack) ? bestTrack->dz(beamspot.position()) : -666);	
-	ftree->mu_bestTrack_dxyError.push_back((hasBestTrack) ? bestTrack->dxyError() : -666);
-	ftree->mu_bestTrack_dzError.push_back((hasBestTrack) ? bestTrack->dzError() : -666);	
-	ftree->mu_bestTrack_normalizedChi2.push_back((hasBestTrack) ? bestTrack->normalizedChi2() : -666);
-	ftree->mu_bestTrack_numberOfValidHits.push_back((hasBestTrack) ? bestTrack->numberOfValidHits() : -666);
-	ftree->mu_bestTrack_numberOfLostHits.push_back((hasBestTrack) ? bestTrack->numberOfLostHits() : -666);
-	ftree->mu_bestTrack_pt.push_back((hasBestTrack) ? bestTrack->pt() : -666);
-	ftree->mu_bestTrack_eta.push_back((hasBestTrack) ? bestTrack->eta() : -666);
-	ftree->mu_bestTrack_phi.push_back((hasBestTrack) ? bestTrack->phi() : -666);
-	ftree->mu_bestTrack_ptError.push_back((hasBestTrack) ? bestTrack->ptError() : -666);
-	ftree->mu_bestTrack_etaError.push_back((hasBestTrack) ? bestTrack->etaError() : -666);
-	ftree->mu_bestTrack_phiError.push_back((hasBestTrack) ? bestTrack->phiError() : -666);
-	ftree->mu_bestTrack_vx.push_back((hasBestTrack) ? bestTrack->vx() : -666);
-	ftree->mu_bestTrack_vy.push_back((hasBestTrack) ? bestTrack->vy() : -666);
-	ftree->mu_bestTrack_vz.push_back((hasBestTrack) ? bestTrack->vz() : -666);
-	ftree->mu_bestTrack_qoverp.push_back((hasBestTrack) ? bestTrack->qoverp() : -666);
-	ftree->mu_bestTrack_qoverpError.push_back((hasBestTrack) ? bestTrack->qoverpError() : -666);
-	ftree->mu_bestTrack_charge.push_back((hasBestTrack) ? bestTrack->charge() : -666);
-	ftree->mu_bestTrack_trackerLayersWithMeasurement.push_back((hasBestTrack) ? bestTrack->hitPattern().trackerLayersWithMeasurement() : -666);
-	ftree->mu_bestTrack_pixelLayersWithMeasurement.push_back((hasBestTrack) ? bestTrack->hitPattern().pixelLayersWithMeasurement() : -666);
-	ftree->mu_bestTrack_numberOfValidStripLayersWithMonoAndStereo.push_back((hasBestTrack) ? bestTrack->hitPattern().numberOfValidStripLayersWithMonoAndStereo() : -666);
-	ftree->mu_bestTrack_trackerLayersWithoutMeasurement.push_back((hasBestTrack) ? bestTrack->hitPattern().trackerLayersWithoutMeasurement(reco::HitPattern::TRACK_HITS) : -666);
-	ftree->mu_bestTrack_numberOfValidPixelHits.push_back((hasBestTrack) ? bestTrack->hitPattern().numberOfValidPixelHits() : -666);
-	ftree->mu_bestTrack_numberOfLostPixelHits.push_back((hasBestTrack) ? bestTrack->hitPattern().numberOfLostPixelHits(reco::HitPattern::TRACK_HITS) : -666);
-	ftree->mu_bestTrack_numberOfInnerHits.push_back((hasBestTrack) ? bestTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_INNER_HITS) : -666);
-	ftree->mu_bestTrack_numberOfOuterHits.push_back((hasBestTrack) ? bestTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_OUTER_HITS) : -666);
-	ftree->mu_bestTrack_validFraction.push_back((hasBestTrack) ? bestTrack->validFraction() : -666);
-
-	// InnerTrack
-	const reco::TrackRef innerTrack = muon.innerTrack();
-	bool hasInnerTrack = innerTrack.isNonnull();
-	
-	ftree->mu_hasInnerTrack.push_back(hasInnerTrack);
-	ftree->mu_innerTrack_d0.push_back((hasInnerTrack) ? innerTrack->d0() : -666);
-	ftree->mu_innerTrack_z0.push_back((hasInnerTrack) ? innerTrack->dz() : -666);
-	ftree->mu_innerTrack_d0Error.push_back((hasInnerTrack) ? innerTrack->d0Error() : -666);
-	ftree->mu_innerTrack_z0Error.push_back((hasInnerTrack) ? innerTrack->dzError() : -666);
-	ftree->mu_innerTrack_PV_dxy.push_back((hasInnerTrack) ? innerTrack->dxy(primVtx->position()) : -666);
-	ftree->mu_innerTrack_PV_dz.push_back((hasInnerTrack) ? innerTrack->dz(primVtx->position()) : -666);	
-	ftree->mu_innerTrack_RP_dxy.push_back((hasInnerTrack) ? innerTrack->dxy(bestTrack->referencePoint()) : -666);
-	ftree->mu_innerTrack_RP_dz.push_back((hasInnerTrack) ? innerTrack->dz(bestTrack->referencePoint()) : -666);
-	ftree->mu_innerTrack_BS_dxy.push_back((hasInnerTrack) ? innerTrack->dxy(beamspot.position()) : -666);
-	ftree->mu_innerTrack_BS_dz.push_back((hasInnerTrack) ? innerTrack->dz(beamspot.position()) : -666);	
-	ftree->mu_innerTrack_dxyError.push_back((hasInnerTrack) ? innerTrack->dxyError() : -666);
-	ftree->mu_innerTrack_dzError.push_back((hasInnerTrack) ? innerTrack->dzError() : -666);	
-	ftree->mu_innerTrack_normalizedChi2.push_back((hasInnerTrack) ? innerTrack->normalizedChi2() : -666);
-	ftree->mu_innerTrack_numberOfValidHits.push_back((hasInnerTrack) ? innerTrack->numberOfValidHits() : -666);
-	ftree->mu_innerTrack_numberOfLostHits.push_back((hasInnerTrack) ? innerTrack->numberOfLostHits() : -666);
-	ftree->mu_innerTrack_pt.push_back((hasInnerTrack) ? innerTrack->pt() : -666);
-	ftree->mu_innerTrack_eta.push_back((hasInnerTrack) ? innerTrack->eta() : -666);
-	ftree->mu_innerTrack_phi.push_back((hasInnerTrack) ? innerTrack->phi() : -666);
-	ftree->mu_innerTrack_ptError.push_back((hasInnerTrack) ? innerTrack->ptError() : -666);
-	ftree->mu_innerTrack_etaError.push_back((hasInnerTrack) ? innerTrack->etaError() : -666);
-	ftree->mu_innerTrack_phiError.push_back((hasInnerTrack) ? innerTrack->phiError() : -666);
-	ftree->mu_innerTrack_vx.push_back((hasInnerTrack) ? innerTrack->vx() : -666);
-	ftree->mu_innerTrack_vy.push_back((hasInnerTrack) ? innerTrack->vy() : -666);
-	ftree->mu_innerTrack_vz.push_back((hasInnerTrack) ? innerTrack->vz() : -666);
-	ftree->mu_innerTrack_qoverp.push_back((hasInnerTrack) ? innerTrack->qoverp() : -666);
-	ftree->mu_innerTrack_qoverpError.push_back((hasInnerTrack) ? innerTrack->qoverpError() : -666);
-	ftree->mu_innerTrack_charge.push_back((hasInnerTrack) ? innerTrack->charge() : -666);
-	ftree->mu_innerTrack_trackerLayersWithMeasurement.push_back((hasInnerTrack) ? innerTrack->hitPattern().trackerLayersWithMeasurement() : -666);
-	ftree->mu_innerTrack_pixelLayersWithMeasurement.push_back((hasInnerTrack) ? innerTrack->hitPattern().pixelLayersWithMeasurement() : -666);
-	ftree->mu_innerTrack_numberOfValidStripLayersWithMonoAndStereo.push_back((hasInnerTrack) ? innerTrack->hitPattern().numberOfValidStripLayersWithMonoAndStereo() : -666);
-	ftree->mu_innerTrack_trackerLayersWithoutMeasurement.push_back((hasInnerTrack) ? innerTrack->hitPattern().trackerLayersWithoutMeasurement(reco::HitPattern::TRACK_HITS) : -666);
-	ftree->mu_innerTrack_numberOfValidPixelHits.push_back((hasInnerTrack) ? innerTrack->hitPattern().numberOfValidPixelHits() : -666);
-	ftree->mu_innerTrack_numberOfLostPixelHits.push_back((hasInnerTrack) ? innerTrack->hitPattern().numberOfLostPixelHits(reco::HitPattern::TRACK_HITS) : -666);
-	ftree->mu_innerTrack_numberOfInnerHits.push_back((hasInnerTrack) ? innerTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_INNER_HITS) : -666);
-	ftree->mu_innerTrack_numberOfOuterHits.push_back((hasInnerTrack) ? innerTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_OUTER_HITS) : -666);
-	ftree->mu_innerTrack_validFraction.push_back((hasInnerTrack) ? innerTrack->validFraction() : -666);
-
-	// PF Isolation	
-	reco::MuonPFIsolation pfR03 = muon.pfIsolationR03();	
-        ftree->mu_pfIso03_sumChargedHadronPt.push_back(pfR03.sumChargedHadronPt);
-	ftree->mu_pfIso03_sumChargedParticlePt.push_back(pfR03.sumChargedParticlePt);
-        ftree->mu_pfIso03_sumNeutralHadronEt.push_back(pfR03.sumNeutralHadronEt);
-	ftree->mu_pfIso03_sumNeutralHadronEtHighThreshold.push_back(pfR03.sumNeutralHadronEtHighThreshold);
-        ftree->mu_pfIso03_sumPhotonEt.push_back(pfR03.sumPhotonEt);
-	ftree->mu_pfIso03_sumPhotonEtHighThreshold.push_back(pfR03.sumPhotonEtHighThreshold);
-        ftree->mu_pfIso03_sumPUPt.push_back(pfR03.sumPUPt);
-
-	reco::MuonPFIsolation pfR04 = muon.pfIsolationR04();	
-        ftree->mu_pfIso04_sumChargedHadronPt.push_back(pfR04.sumChargedHadronPt);
-	ftree->mu_pfIso04_sumChargedParticlePt.push_back(pfR04.sumChargedParticlePt);
-        ftree->mu_pfIso04_sumNeutralHadronEt.push_back(pfR04.sumNeutralHadronEt);
-	ftree->mu_pfIso04_sumNeutralHadronEtHighThreshold.push_back(pfR04.sumNeutralHadronEtHighThreshold);
-        ftree->mu_pfIso04_sumPhotonEt.push_back(pfR04.sumPhotonEt);
-	ftree->mu_pfIso04_sumPhotonEtHighThreshold.push_back(pfR04.sumPhotonEtHighThreshold);
-        ftree->mu_pfIso04_sumPUPt.push_back(pfR04.sumPUPt);
-
-	reco::MuonPFIsolation pfMeanR03 = muon.pfMeanDRIsoProfileR03();
-        ftree->mu_pfMeanIso03_sumChargedHadronPt.push_back(pfMeanR03.sumChargedHadronPt);
-	ftree->mu_pfMeanIso03_sumChargedParticlePt.push_back(pfMeanR03.sumChargedParticlePt);
-        ftree->mu_pfMeanIso03_sumNeutralHadronEt.push_back(pfMeanR03.sumNeutralHadronEt);
-	ftree->mu_pfMeanIso03_sumNeutralHadronEtHighThreshold.push_back(pfMeanR03.sumNeutralHadronEtHighThreshold);
-        ftree->mu_pfMeanIso03_sumPhotonEt.push_back(pfMeanR03.sumPhotonEt);
-	ftree->mu_pfMeanIso03_sumPhotonEtHighThreshold.push_back(pfMeanR03.sumPhotonEtHighThreshold);
-        ftree->mu_pfMeanIso03_sumPUPt.push_back(pfMeanR03.sumPUPt);
-
-	reco::MuonPFIsolation pfSumR03 = muon.pfSumDRIsoProfileR03();
-        ftree->mu_pfSumIso03_sumChargedHadronPt.push_back(pfSumR03.sumChargedHadronPt);
-	ftree->mu_pfSumIso03_sumChargedParticlePt.push_back(pfSumR03.sumChargedParticlePt);
-        ftree->mu_pfSumIso03_sumNeutralHadronEt.push_back(pfSumR03.sumNeutralHadronEt);
-	ftree->mu_pfSumIso03_sumNeutralHadronEtHighThreshold.push_back(pfSumR03.sumNeutralHadronEtHighThreshold);
-        ftree->mu_pfSumIso03_sumPhotonEt.push_back(pfSumR03.sumPhotonEt);
-	ftree->mu_pfSumIso03_sumPhotonEtHighThreshold.push_back(pfSumR03.sumPhotonEtHighThreshold);
-        ftree->mu_pfSumIso03_sumPUPt.push_back(pfSumR03.sumPUPt);
-
-	reco::MuonPFIsolation pfMeanR04 = muon.pfMeanDRIsoProfileR04();
-        ftree->mu_pfMeanIso04_sumChargedHadronPt.push_back(pfMeanR04.sumChargedHadronPt);
-	ftree->mu_pfMeanIso04_sumChargedParticlePt.push_back(pfMeanR04.sumChargedParticlePt);
-        ftree->mu_pfMeanIso04_sumNeutralHadronEt.push_back(pfMeanR04.sumNeutralHadronEt);
-	ftree->mu_pfMeanIso04_sumNeutralHadronEtHighThreshold.push_back(pfMeanR04.sumNeutralHadronEtHighThreshold);
-        ftree->mu_pfMeanIso04_sumPhotonEt.push_back(pfMeanR04.sumPhotonEt);
-	ftree->mu_pfMeanIso04_sumPhotonEtHighThreshold.push_back(pfMeanR04.sumPhotonEtHighThreshold);
-        ftree->mu_pfMeanIso04_sumPUPt.push_back(pfMeanR04.sumPUPt);
-
-	reco::MuonPFIsolation pfSumR04 = muon.pfSumDRIsoProfileR04();
-        ftree->mu_pfSumIso04_sumChargedHadronPt.push_back(pfSumR04.sumChargedHadronPt);
-	ftree->mu_pfSumIso04_sumChargedParticlePt.push_back(pfSumR04.sumChargedParticlePt);
-        ftree->mu_pfSumIso04_sumNeutralHadronEt.push_back(pfSumR04.sumNeutralHadronEt);
-	ftree->mu_pfSumIso04_sumNeutralHadronEtHighThreshold.push_back(pfSumR04.sumNeutralHadronEtHighThreshold);
-        ftree->mu_pfSumIso04_sumPhotonEt.push_back(pfSumR04.sumPhotonEt);
-	ftree->mu_pfSumIso04_sumPhotonEtHighThreshold.push_back(pfSumR04.sumPhotonEtHighThreshold);
-        ftree->mu_pfSumIso04_sumPUPt.push_back(pfSumR04.sumPUPt);
-
-        ftree->mu_neutralHadronIso.push_back(muon.neutralHadronIso());
-        ftree->mu_chargedHadronIso.push_back(muon.chargedHadronIso());
-        ftree->mu_puChargedHadronIso.push_back(muon.puChargedHadronIso());
-        ftree->mu_ecalIso.push_back(muon.ecalIso());
-        ftree->mu_hcalIso.push_back(muon.hcalIso());
-        ftree->mu_photonIso.push_back(muon.photonIso());
-        ftree->mu_trackIso.push_back(muon.trackIso());
-
-	// ID	
-        ftree->mu_isGlobalMuon.push_back(muon.isGlobalMuon());
-        ftree->mu_isTrackerMuon.push_back(muon.isTrackerMuon());
-        ftree->mu_isStandAloneMuon.push_back(muon.isStandAloneMuon());
-        ftree->mu_isCaloMuon.push_back(muon.isCaloMuon());
-        ftree->mu_isPFMuon.push_back(muon.isPFMuon());
-	ftree->mu_isRPCMuon.push_back(muon.isRPCMuon());
-
-	ftree->mu_isLooseMuon.push_back(muon.isLooseMuon());
-	ftree->mu_isMediumMuon.push_back(muon.isMediumMuon());
-	
-	bool isTightMuon = 0; 
-	if( primVtx ) isTightMuon = muon.isTightMuon(*primVtx);
-	ftree->mu_isTightMuon.push_back(isTightMuon);
-	bool isSoftMuon = 0;
-	if( primVtx ) isSoftMuon = muon.isSoftMuon(*primVtx);
-	ftree->mu_isSoftMuon.push_back(isSoftMuon);
-	bool isHighPtMuon = 0;
-	if( primVtx ) isHighPtMuon = muon.isHighPtMuon(*primVtx);
-	ftree->mu_isHighPtMuon.push_back(isHighPtMuon);
-
-	ftree->mu_type.push_back(muon.type());
-
-	ftree->mu_caloCompatibility.push_back(muon.caloCompatibility());
-	ftree->mu_segmentCompatibility.push_back(muon.segmentCompatibility());
-	
-	// vertex
-        ftree->mu_vx.push_back(muon.vx());
-        ftree->mu_vy.push_back(muon.vy());
-        ftree->mu_vz.push_back(muon.vz());
-
-	// mini-iso
-	float miniIso = -666;
-	float miniIsoTTH = -666;
-	float miniIsoTTHCharged = -666;
-	float miniIsoTTHNeutral = -666;
-	if( dataFormat_ != "AOD" )
-	  {
-	     float miniIsoR = 10.0/std::min(std::max(float(muon.pt()),float(50.)),float(200.));
-	     float EffArea = 0.;
-	     float eta = muon.eta();
-	     if( fabs(eta) > 0 && fabs(eta) < 0.8 ) EffArea = 0.0735;
-	     else if( fabs(eta) >= 0.8 && fabs(eta) < 1.3 ) EffArea = 0.0619;
-	     else if( fabs(eta) >= 1.3 && fabs(eta) < 2.0 ) EffArea = 0.0465;
-	     else if( fabs(eta) >= 2.0 && fabs(eta) < 2.2 ) EffArea = 0.0433;
-	     else if( fabs(eta) >= 2.2 && fabs(eta) < 2.5 ) EffArea = 0.0577;
-	     float correction = ftree->ev_rho*EffArea*(miniIsoR/0.3)*(miniIsoR/0.3);
-	     miniIso = getPFIsolation(pfcands,dynamic_cast<const reco::Candidate*>(&muon),0.05,0.2,10.,false,false);
-	     float pfIsoCharged = MuonPfIsoCharged(muon,pfcands,miniIsoR);
-	     float pfIsoNeutral = MuonPfIsoNeutral(muon,pfcands,miniIsoR);
-	     float pfIsoPUSubtracted = std::max(float(0.0),float(pfIsoNeutral-correction));
-	     miniIsoTTH = (pfIsoCharged + pfIsoPUSubtracted)/muon.pt();
-	     miniIsoTTHCharged = pfIsoCharged;
-	     miniIsoTTHNeutral = pfIsoNeutral;
-	  }
-	ftree->mu_miniIso.push_back(miniIso);
-	ftree->mu_miniIsoTTH.push_back(miniIsoTTH);
-
-	// https://twiki.cern.ch/twiki/bin/view/CMSPublic/WorkBookMuonAnalysis#Muon_identification
-	ftree->mu_isGoodMuon_AllGlobalMuons.push_back(muon::isGoodMuon(muon,muon::AllGlobalMuons));
-	ftree->mu_isGoodMuon_AllStandAloneMuons.push_back(muon::isGoodMuon(muon,muon::AllStandAloneMuons));
-	ftree->mu_isGoodMuon_AllTrackerMuons.push_back(muon::isGoodMuon(muon,muon::AllTrackerMuons));
-	ftree->mu_isGoodMuon_TrackerMuonArbitrated.push_back(muon::isGoodMuon(muon,muon::TrackerMuonArbitrated));
-	ftree->mu_isGoodMuon_AllArbitrated.push_back(muon::isGoodMuon(muon,muon::AllArbitrated));
-	ftree->mu_isGoodMuon_GlobalMuonPromptTight.push_back(muon::isGoodMuon(muon,muon::GlobalMuonPromptTight));
-	ftree->mu_isGoodMuon_TMLastStationLoose.push_back(muon::isGoodMuon(muon,muon::TMLastStationLoose));
-	ftree->mu_isGoodMuon_TMLastStationTight.push_back(muon::isGoodMuon(muon,muon::TMLastStationTight));
-	ftree->mu_isGoodMuon_TM2DCompatibilityLoose.push_back(muon::isGoodMuon(muon,muon::TM2DCompatibilityLoose));
-	ftree->mu_isGoodMuon_TM2DCompatibilityTight.push_back(muon::isGoodMuon(muon,muon::TM2DCompatibilityTight));
-	ftree->mu_isGoodMuon_TMOneStationLoose.push_back(muon::isGoodMuon(muon,muon::TMOneStationLoose));
-	ftree->mu_isGoodMuon_TMOneStationTight.push_back(muon::isGoodMuon(muon,muon::TMOneStationTight));
-	ftree->mu_isGoodMuon_TMLastStationOptimizedLowPtLoose.push_back(muon::isGoodMuon(muon,muon::TMLastStationOptimizedLowPtLoose));
-	ftree->mu_isGoodMuon_TMLastStationOptimizedLowPtTight.push_back(muon::isGoodMuon(muon,muon::TMLastStationOptimizedLowPtTight));
-	ftree->mu_isGoodMuon_GMTkChiCompatibility.push_back(muon::isGoodMuon(muon,muon::GMTkChiCompatibility));
-	ftree->mu_isGoodMuon_GMStaChiCompatibility.push_back(muon::isGoodMuon(muon,muon::GMStaChiCompatibility));
-	ftree->mu_isGoodMuon_GMTkKinkTight.push_back(muon::isGoodMuon(muon,muon::GMTkKinkTight));
-	ftree->mu_isGoodMuon_TMLastStationAngLoose.push_back(muon::isGoodMuon(muon,muon::TMLastStationAngLoose));
-	ftree->mu_isGoodMuon_TMLastStationAngTight.push_back(muon::isGoodMuon(muon,muon::TMLastStationAngTight));
-	ftree->mu_isGoodMuon_TMOneStationAngLoose.push_back(muon::isGoodMuon(muon,muon::TMOneStationAngLoose));
-	ftree->mu_isGoodMuon_TMOneStationAngTight.push_back(muon::isGoodMuon(muon,muon::TMOneStationAngTight));
-	ftree->mu_isGoodMuon_TMLastStationOptimizedBarrelLowPtLoose.push_back(muon::isGoodMuon(muon,muon::TMLastStationOptimizedBarrelLowPtLoose));
-	ftree->mu_isGoodMuon_TMLastStationOptimizedBarrelLowPtTight.push_back(muon::isGoodMuon(muon,muon::TMLastStationOptimizedBarrelLowPtTight));
-	
-	bool energyIsValid = muon.isEnergyValid();
-	ftree->mu_calEnergy_em.push_back(energyIsValid ? muon.calEnergy().em : -666.);
-	ftree->mu_calEnergy_had.push_back(energyIsValid ? muon.calEnergy().had : -666.);
-	ftree->mu_calEnergy_ho.push_back(energyIsValid ? muon.calEnergy().ho : -666.);
-	ftree->mu_calEnergy_emS9.push_back(energyIsValid ? muon.calEnergy().emS9 : -666.);
-	ftree->mu_calEnergy_hadS9.push_back(energyIsValid ? muon.calEnergy().hadS9 : -666.);
-	ftree->mu_calEnergy_hoS9.push_back(energyIsValid ? muon.calEnergy().hoS9 : -666.);
-	ftree->mu_calEnergy_emS25.push_back(energyIsValid ? muon.calEnergy().emS25 : -666.);
-	ftree->mu_calEnergy_emMax.push_back(energyIsValid ? muon.calEnergy().emMax : -666.);
-	ftree->mu_calEnergy_hadMax.push_back(energyIsValid ? muon.calEnergy().hadMax : -666.);
-	ftree->mu_calEnergy_ecal_time.push_back(energyIsValid ? muon.calEnergy().ecal_time : -666.);
-	ftree->mu_calEnergy_hcal_time.push_back(energyIsValid ? muon.calEnergy().hcal_time : -666.);
-	ftree->mu_calEnergy_ecal_rawId.push_back(energyIsValid ? muon.calEnergy().ecal_id.rawId() : -666.);
-	ftree->mu_calEnergy_hcal_rawId.push_back(energyIsValid ? muon.calEnergy().hcal_id.rawId() : -666.);
-	
-	bool isoIsValid = muon.isIsolationValid();
-	
-	ftree->mu_isolationR03_trackerVetoPt.push_back(isoIsValid ? muon.isolationR03().trackerVetoPt : -666.);
-	ftree->mu_isolationR03_emVetoEt.push_back(isoIsValid ? muon.isolationR03().emVetoEt : -666.);
-	ftree->mu_isolationR03_hadVetoEt.push_back(isoIsValid ? muon.isolationR03().hadVetoEt : -666.);
-	ftree->mu_isolationR03_hoVetoEt.push_back(isoIsValid ? muon.isolationR03().hoVetoEt : -666.);
-	ftree->mu_isolationR03_sumPt.push_back(isoIsValid ? muon.isolationR03().sumPt : -666.);
-	ftree->mu_isolationR03_emEt.push_back(isoIsValid ? muon.isolationR03().emEt : -666.);
-	ftree->mu_isolationR03_hadEt.push_back(isoIsValid ? muon.isolationR03().hadEt : -666.);
-	ftree->mu_isolationR03_hoEt.push_back(isoIsValid ? muon.isolationR03().hoEt : -666.);
-	ftree->mu_isolationR03_nTracks.push_back(isoIsValid ? muon.isolationR03().nTracks : -666.);
-	ftree->mu_isolationR03_nJets.push_back(isoIsValid ? muon.isolationR03().nJets : -666.);
-
-	ftree->mu_isolationR05_trackerVetoPt.push_back(isoIsValid ? muon.isolationR05().trackerVetoPt : -666.);
-	ftree->mu_isolationR05_emVetoEt.push_back(isoIsValid ? muon.isolationR05().emVetoEt : -666.);
-	ftree->mu_isolationR05_hadVetoEt.push_back(isoIsValid ? muon.isolationR05().hadVetoEt : -666.);
-	ftree->mu_isolationR05_hoVetoEt.push_back(isoIsValid ? muon.isolationR05().hoVetoEt : -666.);
-	ftree->mu_isolationR05_sumPt.push_back(isoIsValid ? muon.isolationR05().sumPt : -666.);
-	ftree->mu_isolationR05_emEt.push_back(isoIsValid ? muon.isolationR05().emEt : -666.);
-	ftree->mu_isolationR05_hadEt.push_back(isoIsValid ? muon.isolationR05().hadEt : -666.);
-	ftree->mu_isolationR05_hoEt.push_back(isoIsValid ? muon.isolationR05().hoEt : -666.);
-	ftree->mu_isolationR05_nTracks.push_back(isoIsValid ? muon.isolationR05().nTracks : -666.);
-	ftree->mu_isolationR05_nJets.push_back(isoIsValid ? muon.isolationR05().nJets : -666.);
-
-	// ttH lepton MVA
-	double mu_pt = muon.pt();
-	double mu_eta = muon.eta();
-	double mu_phi = muon.phi();
-	double mu_lepMVA = -666.;
-
-	float drmin = 0.5;
-	int jcl = -1;
-	for(unsigned int ij=0;ij<jets->size();ij++)
-	  {	     
-	     if( jets->at(ij).pt() < 10. ) continue;
-	     float dr = GetDeltaR(jets->at(ij).eta(),
-				  jets->at(ij).phi(),
-				  mu_eta,
-				  mu_phi);
-	     if( dr < drmin )
-	       {		  
-		  drmin = dr;
-		  jcl = ij;
-	       }	     
-	  }	
-	
-	lepMVA_pt = mu_pt;
-	lepMVA_miniRelIsoNeutral = miniIsoTTHNeutral;
-	lepMVA_miniRelIsoCharged = miniIsoTTHCharged;
-	lepMVA_jetPtRatio = (jcl >= 0) ? std::min(mu_pt/jets->at(jcl).pt(),1.5) : 1.5;
-	lepMVA_jetPtRelv2 = (jcl >= 0) ? ptRelMuon(muon,jets->at(jcl)) : 0.0;
-	float csv = (jcl >= 0) ? jets->at(jcl).bDiscriminator("pfCombinedInclusiveSecondaryVertexV2BJetTags") : -666;
-	lepMVA_jetBTagCSV = std::max(double(csv),0.);
-	lepMVA_sip3d = fabs(ftree->mu_ip3d.back()/ftree->mu_ip3dErr.back());
-	lepMVA_dxy = log(fabs(ftree->mu_innerTrack_PV_dxy.back()));
-	lepMVA_dz = log(fabs(ftree->mu_innerTrack_PV_dz.back()));
-	lepMVA_mvaId = ftree->mu_segmentCompatibility.back();
-	
-	if( fabs(mu_eta) < 1.5 ) mu_lepMVA = mu_reader_b->EvaluateMVA("BDTG method");
-	else mu_lepMVA = mu_reader_e->EvaluateMVA("BDTG method");
-
-	ftree->mu_lepMVA.push_back(mu_lepMVA);
-
-	ftree->mu_lepMVA_pt.push_back(lepMVA_pt);
-        ftree->mu_lepMVA_miniRelIsoCharged.push_back(lepMVA_miniRelIsoCharged);
-        ftree->mu_lepMVA_miniRelIsoNeutral.push_back(lepMVA_miniRelIsoNeutral);
-        ftree->mu_lepMVA_jetPtRatio.push_back(lepMVA_jetPtRatio);
-	ftree->mu_lepMVA_jetPtRelv2.push_back(lepMVA_jetPtRelv2);
-        ftree->mu_lepMVA_jetBTagCSV.push_back(lepMVA_jetBTagCSV);
-        ftree->mu_lepMVA_sip3d.push_back(lepMVA_sip3d);
-	ftree->mu_lepMVA_dxy.push_back(lepMVA_dxy);
-	ftree->mu_lepMVA_dz.push_back(lepMVA_dz);
-        ftree->mu_lepMVA_mvaId.push_back(lepMVA_mvaId);
-
-	if( !isData_ )
-	  {
-	     // Internal matching
-	     reco::GenParticle *genp = new reco::GenParticle();
-
-	     float drmin;
-	     bool hasMCMatch = mc_truth->doMatch(iEvent,iSetup,genParticlesHandle,genp,drmin,
-						 muon.pt(),muon.eta(),muon.phi(),muon.pdgId());
-	     ftree->mu_hasMCMatch.push_back(hasMCMatch);
-	     if( hasMCMatch )
-	       {
-		  ftree->mu_gen_pt.push_back(genp->pt());
-		  ftree->mu_gen_eta.push_back(genp->eta());
-		  ftree->mu_gen_phi.push_back(genp->phi());
-		  ftree->mu_gen_m.push_back(genp->mass());
-		  ftree->mu_gen_status.push_back(genp->status());
-		  ftree->mu_gen_id.push_back(genp->pdgId());
-		  ftree->mu_gen_charge.push_back(genp->charge());
-		  ftree->mu_gen_dr.push_back(drmin);
-	       }	     
-	     else
-	       {
-		  ftree->mu_gen_pt.push_back(-666);
-		  ftree->mu_gen_eta.push_back(-666);
-		  ftree->mu_gen_phi.push_back(-666);
-		  ftree->mu_gen_m.push_back(-666);
-		  ftree->mu_gen_status.push_back(-666);
-		  ftree->mu_gen_id.push_back(-666);
-		  ftree->mu_gen_charge.push_back(-666);
-		  ftree->mu_gen_dr.push_back(-666);
-	       }	     
-	     delete genp;
-	     
-	     // PAT matching
-	     const reco::GenParticle *genpPAT = muon.genParticle();
-	     bool hasMCMatchPAT = (genpPAT != 0);
-	     ftree->mu_hasMCMatchPAT.push_back(hasMCMatchPAT);
-	     if( hasMCMatchPAT )
-	       {
-		  ftree->mu_genPAT_pt.push_back(genpPAT->pt());
-		  ftree->mu_genPAT_eta.push_back(genpPAT->eta());
-		  ftree->mu_genPAT_phi.push_back(genpPAT->phi());
-		  ftree->mu_genPAT_m.push_back(genpPAT->mass());
-		  ftree->mu_genPAT_status.push_back(genpPAT->status());
-		  ftree->mu_genPAT_id.push_back(genpPAT->pdgId());
-		  ftree->mu_genPAT_charge.push_back(genpPAT->charge());
-	       }	     
-	     else
-	       {
-		  ftree->mu_genPAT_pt.push_back(-666);
-		  ftree->mu_genPAT_eta.push_back(-666);
-		  ftree->mu_genPAT_phi.push_back(-666);
-		  ftree->mu_genPAT_m.push_back(-666);
-		  ftree->mu_genPAT_status.push_back(-666);
-		  ftree->mu_genPAT_id.push_back(-666);
-		  ftree->mu_genPAT_charge.push_back(-666);
-	       }	     
-	  }
-     }   
+   {
+       const pat::Muon& muon = muons->at(im);
+
+       // Skimming muons with pT < 5 GeV.
+       if (muon.pt() < 5) continue;
+
+       ftree->mu_pt.push_back(muon.pt());
+       ftree->mu_eta.push_back(muon.eta());
+       ftree->mu_phi.push_back(muon.phi());
+       ftree->mu_m.push_back(muon.mass());
+       ftree->mu_E.push_back(muon.energy());
+       ftree->mu_id.push_back(muon.pdgId());
+       ftree->mu_charge.push_back(muon.charge());
+
+       // IP
+       ftree->mu_ip3d.push_back(muon.dB(pat::Muon::PV3D));
+       ftree->mu_ip3dErr.push_back(muon.edB(pat::Muon::PV3D));
+       ftree->mu_ip2d.push_back(muon.dB(pat::Muon::PV2D));
+       ftree->mu_ip2dErr.push_back(muon.edB(pat::Muon::PV2D));
+       ftree->mu_ip3dBS.push_back(muon.dB(pat::Muon::BS3D));
+       ftree->mu_ip3dBSErr.push_back(muon.edB(pat::Muon::BS3D));
+       ftree->mu_ip2dBS.push_back(muon.dB(pat::Muon::BS2D));
+       ftree->mu_ip2dBSErr.push_back(muon.edB(pat::Muon::BS2D));
+
+       const reco::MuonQuality combQuality = muon.combinedQuality();
+       ftree->mu_combinedQuality_chi2LocalPosition.push_back(combQuality.chi2LocalPosition);
+       ftree->mu_combinedQuality_trkKink.push_back(combQuality.trkKink);
+
+       ftree->mu_numberOfMatches.push_back(muon.isMatchesValid() ? muon.numberOfMatches() : -666);
+       ftree->mu_numberOfMatchedStations.push_back(muon.numberOfMatchedStations());
+
+       // GlobalTrack
+       const reco::TrackRef globalTrack = muon.globalTrack();
+       bool hasGlobalTrack = globalTrack.isNonnull();
+
+       ftree->mu_hasGlobalTrack.push_back(hasGlobalTrack);
+       ftree->mu_globalTrack_d0.push_back((hasGlobalTrack) ? globalTrack->d0() : -666);
+       ftree->mu_globalTrack_z0.push_back((hasGlobalTrack) ? globalTrack->dz() : -666);
+       ftree->mu_globalTrack_d0Error.push_back((hasGlobalTrack) ? globalTrack->d0Error() : -666);
+       ftree->mu_globalTrack_z0Error.push_back((hasGlobalTrack) ? globalTrack->dzError() : -666);
+       ftree->mu_globalTrack_PV_dxy.push_back((hasGlobalTrack) ? globalTrack->dxy(primVtx->position()) : -666);
+       ftree->mu_globalTrack_PV_dz.push_back((hasGlobalTrack) ? globalTrack->dz(primVtx->position()) : -666);	
+       ftree->mu_globalTrack_RP_dxy.push_back((hasGlobalTrack) ? globalTrack->dxy(globalTrack->referencePoint()) : -666);
+       ftree->mu_globalTrack_RP_dz.push_back((hasGlobalTrack) ? globalTrack->dz(globalTrack->referencePoint()) : -666);
+       ftree->mu_globalTrack_BS_dxy.push_back((hasGlobalTrack) ? globalTrack->dxy(beamspot.position()) : -666);
+       ftree->mu_globalTrack_BS_dz.push_back((hasGlobalTrack) ? globalTrack->dz(beamspot.position()) : -666);	
+       ftree->mu_globalTrack_dxyError.push_back((hasGlobalTrack) ? globalTrack->dxyError() : -666);
+       ftree->mu_globalTrack_dzError.push_back((hasGlobalTrack) ? globalTrack->dzError() : -666);	
+       ftree->mu_globalTrack_normalizedChi2.push_back((hasGlobalTrack) ? globalTrack->normalizedChi2() : -666);
+       ftree->mu_globalTrack_numberOfValidHits.push_back((hasGlobalTrack) ? globalTrack->numberOfValidHits() : -666);
+       ftree->mu_globalTrack_numberOfLostHits.push_back((hasGlobalTrack) ? globalTrack->numberOfLostHits() : -666);
+       ftree->mu_globalTrack_pt.push_back((hasGlobalTrack) ? globalTrack->pt() : -666);
+       ftree->mu_globalTrack_eta.push_back((hasGlobalTrack) ? globalTrack->eta() : -666);
+       ftree->mu_globalTrack_phi.push_back((hasGlobalTrack) ? globalTrack->phi() : -666);
+       ftree->mu_globalTrack_ptError.push_back((hasGlobalTrack) ? globalTrack->ptError() : -666);
+       ftree->mu_globalTrack_etaError.push_back((hasGlobalTrack) ? globalTrack->etaError() : -666);
+       ftree->mu_globalTrack_phiError.push_back((hasGlobalTrack) ? globalTrack->phiError() : -666);
+       ftree->mu_globalTrack_vx.push_back((hasGlobalTrack) ? globalTrack->vx() : -666);
+       ftree->mu_globalTrack_vy.push_back((hasGlobalTrack) ? globalTrack->vy() : -666);
+       ftree->mu_globalTrack_vz.push_back((hasGlobalTrack) ? globalTrack->vz() : -666);
+       ftree->mu_globalTrack_qoverp.push_back((hasGlobalTrack) ? globalTrack->qoverp() : -666);
+       ftree->mu_globalTrack_qoverpError.push_back((hasGlobalTrack) ? globalTrack->qoverpError() : -666);
+       ftree->mu_globalTrack_charge.push_back((hasGlobalTrack) ? globalTrack->charge() : -666);
+       ftree->mu_globalTrack_trackerLayersWithMeasurement.push_back((hasGlobalTrack) ? globalTrack->hitPattern().trackerLayersWithMeasurement() : -666);
+       ftree->mu_globalTrack_pixelLayersWithMeasurement.push_back((hasGlobalTrack) ? globalTrack->hitPattern().pixelLayersWithMeasurement() : -666);
+       ftree->mu_globalTrack_numberOfValidStripLayersWithMonoAndStereo.push_back((hasGlobalTrack) ? globalTrack->hitPattern().numberOfValidStripLayersWithMonoAndStereo() : -666);
+       ftree->mu_globalTrack_trackerLayersWithoutMeasurement.push_back((hasGlobalTrack) ? globalTrack->hitPattern().trackerLayersWithoutMeasurement(reco::HitPattern::TRACK_HITS) : -666);
+       ftree->mu_globalTrack_numberOfValidPixelHits.push_back((hasGlobalTrack) ? globalTrack->hitPattern().numberOfValidPixelHits() : -666);
+       ftree->mu_globalTrack_numberOfLostPixelHits.push_back((hasGlobalTrack) ? globalTrack->hitPattern().numberOfLostPixelHits(reco::HitPattern::TRACK_HITS) : -666);
+       ftree->mu_globalTrack_numberOfInnerHits.push_back((hasGlobalTrack) ? globalTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_INNER_HITS) : -666);
+       ftree->mu_globalTrack_numberOfOuterHits.push_back((hasGlobalTrack) ? globalTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_OUTER_HITS) : -666);
+       ftree->mu_globalTrack_validFraction.push_back((hasGlobalTrack) ? globalTrack->validFraction() : -666);
+
+       // BestTrack
+       ftree->mu_bestTrackType.push_back(muon.muonBestTrackType());
+       const reco::TrackRef bestTrack = muon.muonBestTrack();
+       bool hasBestTrack = bestTrack.isNonnull();
+
+       ftree->mu_hasBestTrack.push_back(hasBestTrack);
+       ftree->mu_bestTrack_d0.push_back((hasBestTrack) ? bestTrack->d0() : -666);
+       ftree->mu_bestTrack_z0.push_back((hasBestTrack) ? bestTrack->dz() : -666);
+       ftree->mu_bestTrack_d0Error.push_back((hasBestTrack) ? bestTrack->d0Error() : -666);
+       ftree->mu_bestTrack_z0Error.push_back((hasBestTrack) ? bestTrack->dzError() : -666);
+       ftree->mu_bestTrack_PV_dxy.push_back((hasBestTrack) ? bestTrack->dxy(primVtx->position()) : -666);
+       ftree->mu_bestTrack_PV_dz.push_back((hasBestTrack) ? bestTrack->dz(primVtx->position()) : -666);	
+       ftree->mu_bestTrack_RP_dxy.push_back((hasBestTrack) ? bestTrack->dxy(bestTrack->referencePoint()) : -666);
+       ftree->mu_bestTrack_RP_dz.push_back((hasBestTrack) ? bestTrack->dz(bestTrack->referencePoint()) : -666);
+       ftree->mu_bestTrack_BS_dxy.push_back((hasBestTrack) ? bestTrack->dxy(beamspot.position()) : -666);
+       ftree->mu_bestTrack_BS_dz.push_back((hasBestTrack) ? bestTrack->dz(beamspot.position()) : -666);	
+       ftree->mu_bestTrack_dxyError.push_back((hasBestTrack) ? bestTrack->dxyError() : -666);
+       ftree->mu_bestTrack_dzError.push_back((hasBestTrack) ? bestTrack->dzError() : -666);	
+       ftree->mu_bestTrack_normalizedChi2.push_back((hasBestTrack) ? bestTrack->normalizedChi2() : -666);
+       ftree->mu_bestTrack_numberOfValidHits.push_back((hasBestTrack) ? bestTrack->numberOfValidHits() : -666);
+       ftree->mu_bestTrack_numberOfLostHits.push_back((hasBestTrack) ? bestTrack->numberOfLostHits() : -666);
+       ftree->mu_bestTrack_pt.push_back((hasBestTrack) ? bestTrack->pt() : -666);
+       ftree->mu_bestTrack_eta.push_back((hasBestTrack) ? bestTrack->eta() : -666);
+       ftree->mu_bestTrack_phi.push_back((hasBestTrack) ? bestTrack->phi() : -666);
+       ftree->mu_bestTrack_ptError.push_back((hasBestTrack) ? bestTrack->ptError() : -666);
+       ftree->mu_bestTrack_etaError.push_back((hasBestTrack) ? bestTrack->etaError() : -666);
+       ftree->mu_bestTrack_phiError.push_back((hasBestTrack) ? bestTrack->phiError() : -666);
+       ftree->mu_bestTrack_vx.push_back((hasBestTrack) ? bestTrack->vx() : -666);
+       ftree->mu_bestTrack_vy.push_back((hasBestTrack) ? bestTrack->vy() : -666);
+       ftree->mu_bestTrack_vz.push_back((hasBestTrack) ? bestTrack->vz() : -666);
+       ftree->mu_bestTrack_qoverp.push_back((hasBestTrack) ? bestTrack->qoverp() : -666);
+       ftree->mu_bestTrack_qoverpError.push_back((hasBestTrack) ? bestTrack->qoverpError() : -666);
+       ftree->mu_bestTrack_charge.push_back((hasBestTrack) ? bestTrack->charge() : -666);
+       ftree->mu_bestTrack_trackerLayersWithMeasurement.push_back((hasBestTrack) ? bestTrack->hitPattern().trackerLayersWithMeasurement() : -666);
+       ftree->mu_bestTrack_pixelLayersWithMeasurement.push_back((hasBestTrack) ? bestTrack->hitPattern().pixelLayersWithMeasurement() : -666);
+       ftree->mu_bestTrack_numberOfValidStripLayersWithMonoAndStereo.push_back((hasBestTrack) ? bestTrack->hitPattern().numberOfValidStripLayersWithMonoAndStereo() : -666);
+       ftree->mu_bestTrack_trackerLayersWithoutMeasurement.push_back((hasBestTrack) ? bestTrack->hitPattern().trackerLayersWithoutMeasurement(reco::HitPattern::TRACK_HITS) : -666);
+       ftree->mu_bestTrack_numberOfValidPixelHits.push_back((hasBestTrack) ? bestTrack->hitPattern().numberOfValidPixelHits() : -666);
+       ftree->mu_bestTrack_numberOfLostPixelHits.push_back((hasBestTrack) ? bestTrack->hitPattern().numberOfLostPixelHits(reco::HitPattern::TRACK_HITS) : -666);
+       ftree->mu_bestTrack_numberOfInnerHits.push_back((hasBestTrack) ? bestTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_INNER_HITS) : -666);
+       ftree->mu_bestTrack_numberOfOuterHits.push_back((hasBestTrack) ? bestTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_OUTER_HITS) : -666);
+       ftree->mu_bestTrack_validFraction.push_back((hasBestTrack) ? bestTrack->validFraction() : -666);
+
+       // InnerTrack
+       const reco::TrackRef innerTrack = muon.innerTrack();
+       bool hasInnerTrack = innerTrack.isNonnull();
+
+       ftree->mu_hasInnerTrack.push_back(hasInnerTrack);
+       ftree->mu_innerTrack_d0.push_back((hasInnerTrack) ? innerTrack->d0() : -666);
+       ftree->mu_innerTrack_z0.push_back((hasInnerTrack) ? innerTrack->dz() : -666);
+       ftree->mu_innerTrack_d0Error.push_back((hasInnerTrack) ? innerTrack->d0Error() : -666);
+       ftree->mu_innerTrack_z0Error.push_back((hasInnerTrack) ? innerTrack->dzError() : -666);
+       ftree->mu_innerTrack_PV_dxy.push_back((hasInnerTrack) ? innerTrack->dxy(primVtx->position()) : -666);
+       ftree->mu_innerTrack_PV_dz.push_back((hasInnerTrack) ? innerTrack->dz(primVtx->position()) : -666);	
+       ftree->mu_innerTrack_RP_dxy.push_back((hasInnerTrack) ? innerTrack->dxy(bestTrack->referencePoint()) : -666);
+       ftree->mu_innerTrack_RP_dz.push_back((hasInnerTrack) ? innerTrack->dz(bestTrack->referencePoint()) : -666);
+       ftree->mu_innerTrack_BS_dxy.push_back((hasInnerTrack) ? innerTrack->dxy(beamspot.position()) : -666);
+       ftree->mu_innerTrack_BS_dz.push_back((hasInnerTrack) ? innerTrack->dz(beamspot.position()) : -666);	
+       ftree->mu_innerTrack_dxyError.push_back((hasInnerTrack) ? innerTrack->dxyError() : -666);
+       ftree->mu_innerTrack_dzError.push_back((hasInnerTrack) ? innerTrack->dzError() : -666);	
+       ftree->mu_innerTrack_normalizedChi2.push_back((hasInnerTrack) ? innerTrack->normalizedChi2() : -666);
+       ftree->mu_innerTrack_numberOfValidHits.push_back((hasInnerTrack) ? innerTrack->numberOfValidHits() : -666);
+       ftree->mu_innerTrack_numberOfLostHits.push_back((hasInnerTrack) ? innerTrack->numberOfLostHits() : -666);
+       ftree->mu_innerTrack_pt.push_back((hasInnerTrack) ? innerTrack->pt() : -666);
+       ftree->mu_innerTrack_eta.push_back((hasInnerTrack) ? innerTrack->eta() : -666);
+       ftree->mu_innerTrack_phi.push_back((hasInnerTrack) ? innerTrack->phi() : -666);
+       ftree->mu_innerTrack_ptError.push_back((hasInnerTrack) ? innerTrack->ptError() : -666);
+       ftree->mu_innerTrack_etaError.push_back((hasInnerTrack) ? innerTrack->etaError() : -666);
+       ftree->mu_innerTrack_phiError.push_back((hasInnerTrack) ? innerTrack->phiError() : -666);
+       ftree->mu_innerTrack_vx.push_back((hasInnerTrack) ? innerTrack->vx() : -666);
+       ftree->mu_innerTrack_vy.push_back((hasInnerTrack) ? innerTrack->vy() : -666);
+       ftree->mu_innerTrack_vz.push_back((hasInnerTrack) ? innerTrack->vz() : -666);
+       ftree->mu_innerTrack_qoverp.push_back((hasInnerTrack) ? innerTrack->qoverp() : -666);
+       ftree->mu_innerTrack_qoverpError.push_back((hasInnerTrack) ? innerTrack->qoverpError() : -666);
+       ftree->mu_innerTrack_charge.push_back((hasInnerTrack) ? innerTrack->charge() : -666);
+       ftree->mu_innerTrack_trackerLayersWithMeasurement.push_back((hasInnerTrack) ? innerTrack->hitPattern().trackerLayersWithMeasurement() : -666);
+       ftree->mu_innerTrack_pixelLayersWithMeasurement.push_back((hasInnerTrack) ? innerTrack->hitPattern().pixelLayersWithMeasurement() : -666);
+       ftree->mu_innerTrack_numberOfValidStripLayersWithMonoAndStereo.push_back((hasInnerTrack) ? innerTrack->hitPattern().numberOfValidStripLayersWithMonoAndStereo() : -666);
+       ftree->mu_innerTrack_trackerLayersWithoutMeasurement.push_back((hasInnerTrack) ? innerTrack->hitPattern().trackerLayersWithoutMeasurement(reco::HitPattern::TRACK_HITS) : -666);
+       ftree->mu_innerTrack_numberOfValidPixelHits.push_back((hasInnerTrack) ? innerTrack->hitPattern().numberOfValidPixelHits() : -666);
+       ftree->mu_innerTrack_numberOfLostPixelHits.push_back((hasInnerTrack) ? innerTrack->hitPattern().numberOfLostPixelHits(reco::HitPattern::TRACK_HITS) : -666);
+       ftree->mu_innerTrack_numberOfInnerHits.push_back((hasInnerTrack) ? innerTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_INNER_HITS) : -666);
+       ftree->mu_innerTrack_numberOfOuterHits.push_back((hasInnerTrack) ? innerTrack->hitPattern().numberOfHits(reco::HitPattern::MISSING_OUTER_HITS) : -666);
+       ftree->mu_innerTrack_validFraction.push_back((hasInnerTrack) ? innerTrack->validFraction() : -666);
+
+       // PF Isolation	
+       reco::MuonPFIsolation pfR03 = muon.pfIsolationR03();	
+       ftree->mu_pfIso03_sumChargedHadronPt.push_back(pfR03.sumChargedHadronPt);
+       ftree->mu_pfIso03_sumChargedParticlePt.push_back(pfR03.sumChargedParticlePt);
+       ftree->mu_pfIso03_sumNeutralHadronEt.push_back(pfR03.sumNeutralHadronEt);
+       ftree->mu_pfIso03_sumNeutralHadronEtHighThreshold.push_back(pfR03.sumNeutralHadronEtHighThreshold);
+       ftree->mu_pfIso03_sumPhotonEt.push_back(pfR03.sumPhotonEt);
+       ftree->mu_pfIso03_sumPhotonEtHighThreshold.push_back(pfR03.sumPhotonEtHighThreshold);
+       ftree->mu_pfIso03_sumPUPt.push_back(pfR03.sumPUPt);
+
+       reco::MuonPFIsolation pfR04 = muon.pfIsolationR04();	
+       ftree->mu_pfIso04_sumChargedHadronPt.push_back(pfR04.sumChargedHadronPt);
+       ftree->mu_pfIso04_sumChargedParticlePt.push_back(pfR04.sumChargedParticlePt);
+       ftree->mu_pfIso04_sumNeutralHadronEt.push_back(pfR04.sumNeutralHadronEt);
+       ftree->mu_pfIso04_sumNeutralHadronEtHighThreshold.push_back(pfR04.sumNeutralHadronEtHighThreshold);
+       ftree->mu_pfIso04_sumPhotonEt.push_back(pfR04.sumPhotonEt);
+       ftree->mu_pfIso04_sumPhotonEtHighThreshold.push_back(pfR04.sumPhotonEtHighThreshold);
+       ftree->mu_pfIso04_sumPUPt.push_back(pfR04.sumPUPt);
+
+       reco::MuonPFIsolation pfMeanR03 = muon.pfMeanDRIsoProfileR03();
+       ftree->mu_pfMeanIso03_sumChargedHadronPt.push_back(pfMeanR03.sumChargedHadronPt);
+       ftree->mu_pfMeanIso03_sumChargedParticlePt.push_back(pfMeanR03.sumChargedParticlePt);
+       ftree->mu_pfMeanIso03_sumNeutralHadronEt.push_back(pfMeanR03.sumNeutralHadronEt);
+       ftree->mu_pfMeanIso03_sumNeutralHadronEtHighThreshold.push_back(pfMeanR03.sumNeutralHadronEtHighThreshold);
+       ftree->mu_pfMeanIso03_sumPhotonEt.push_back(pfMeanR03.sumPhotonEt);
+       ftree->mu_pfMeanIso03_sumPhotonEtHighThreshold.push_back(pfMeanR03.sumPhotonEtHighThreshold);
+       ftree->mu_pfMeanIso03_sumPUPt.push_back(pfMeanR03.sumPUPt);
+
+       reco::MuonPFIsolation pfSumR03 = muon.pfSumDRIsoProfileR03();
+       ftree->mu_pfSumIso03_sumChargedHadronPt.push_back(pfSumR03.sumChargedHadronPt);
+       ftree->mu_pfSumIso03_sumChargedParticlePt.push_back(pfSumR03.sumChargedParticlePt);
+       ftree->mu_pfSumIso03_sumNeutralHadronEt.push_back(pfSumR03.sumNeutralHadronEt);
+       ftree->mu_pfSumIso03_sumNeutralHadronEtHighThreshold.push_back(pfSumR03.sumNeutralHadronEtHighThreshold);
+       ftree->mu_pfSumIso03_sumPhotonEt.push_back(pfSumR03.sumPhotonEt);
+       ftree->mu_pfSumIso03_sumPhotonEtHighThreshold.push_back(pfSumR03.sumPhotonEtHighThreshold);
+       ftree->mu_pfSumIso03_sumPUPt.push_back(pfSumR03.sumPUPt);
+
+       reco::MuonPFIsolation pfMeanR04 = muon.pfMeanDRIsoProfileR04();
+       ftree->mu_pfMeanIso04_sumChargedHadronPt.push_back(pfMeanR04.sumChargedHadronPt);
+       ftree->mu_pfMeanIso04_sumChargedParticlePt.push_back(pfMeanR04.sumChargedParticlePt);
+       ftree->mu_pfMeanIso04_sumNeutralHadronEt.push_back(pfMeanR04.sumNeutralHadronEt);
+       ftree->mu_pfMeanIso04_sumNeutralHadronEtHighThreshold.push_back(pfMeanR04.sumNeutralHadronEtHighThreshold);
+       ftree->mu_pfMeanIso04_sumPhotonEt.push_back(pfMeanR04.sumPhotonEt);
+       ftree->mu_pfMeanIso04_sumPhotonEtHighThreshold.push_back(pfMeanR04.sumPhotonEtHighThreshold);
+       ftree->mu_pfMeanIso04_sumPUPt.push_back(pfMeanR04.sumPUPt);
+
+       reco::MuonPFIsolation pfSumR04 = muon.pfSumDRIsoProfileR04();
+       ftree->mu_pfSumIso04_sumChargedHadronPt.push_back(pfSumR04.sumChargedHadronPt);
+       ftree->mu_pfSumIso04_sumChargedParticlePt.push_back(pfSumR04.sumChargedParticlePt);
+       ftree->mu_pfSumIso04_sumNeutralHadronEt.push_back(pfSumR04.sumNeutralHadronEt);
+       ftree->mu_pfSumIso04_sumNeutralHadronEtHighThreshold.push_back(pfSumR04.sumNeutralHadronEtHighThreshold);
+       ftree->mu_pfSumIso04_sumPhotonEt.push_back(pfSumR04.sumPhotonEt);
+       ftree->mu_pfSumIso04_sumPhotonEtHighThreshold.push_back(pfSumR04.sumPhotonEtHighThreshold);
+       ftree->mu_pfSumIso04_sumPUPt.push_back(pfSumR04.sumPUPt);
+
+       ftree->mu_neutralHadronIso.push_back(muon.neutralHadronIso());
+       ftree->mu_chargedHadronIso.push_back(muon.chargedHadronIso());
+       ftree->mu_puChargedHadronIso.push_back(muon.puChargedHadronIso());
+       ftree->mu_ecalIso.push_back(muon.ecalIso());
+       ftree->mu_hcalIso.push_back(muon.hcalIso());
+       ftree->mu_photonIso.push_back(muon.photonIso());
+       ftree->mu_trackIso.push_back(muon.trackIso());
+
+       // ID	
+       ftree->mu_isGlobalMuon.push_back(muon.isGlobalMuon());
+       ftree->mu_isTrackerMuon.push_back(muon.isTrackerMuon());
+       ftree->mu_isStandAloneMuon.push_back(muon.isStandAloneMuon());
+       ftree->mu_isCaloMuon.push_back(muon.isCaloMuon());
+       ftree->mu_isPFMuon.push_back(muon.isPFMuon());
+       ftree->mu_isRPCMuon.push_back(muon.isRPCMuon());
+
+       ftree->mu_isLooseMuon.push_back(muon.isLooseMuon());
+       ftree->mu_isMediumMuon.push_back(muon.isMediumMuon());
+
+       bool isTightMuon = 0; 
+       if( primVtx ) isTightMuon = muon.isTightMuon(*primVtx);
+       ftree->mu_isTightMuon.push_back(isTightMuon);
+       bool isSoftMuon = 0;
+       if( primVtx ) isSoftMuon = muon.isSoftMuon(*primVtx);
+       ftree->mu_isSoftMuon.push_back(isSoftMuon);
+       bool isHighPtMuon = 0;
+       if( primVtx ) isHighPtMuon = muon.isHighPtMuon(*primVtx);
+       ftree->mu_isHighPtMuon.push_back(isHighPtMuon);
+
+       ftree->mu_type.push_back(muon.type());
+
+       ftree->mu_caloCompatibility.push_back(muon.caloCompatibility());
+       ftree->mu_segmentCompatibility.push_back(muon.segmentCompatibility());
+
+       // vertex
+       ftree->mu_vx.push_back(muon.vx());
+       ftree->mu_vy.push_back(muon.vy());
+       ftree->mu_vz.push_back(muon.vz());
+
+       // mini-iso
+       float miniIso           = -666;
+       float miniIsoTTH        = -666;
+       float miniIsoTTHCharged = -666;
+       float miniIsoTTHNeutral = -666;
+       if( dataFormat_ != "AOD" )
+       {
+           float miniIsoR = 10.0/std::min(std::max(float(muon.pt()),float(50.)),float(200.));
+           float EffArea = 0.;
+           float eta = muon.eta();
+           
+           if(      fabs(eta) > 0    && fabs(eta) < 0.8 ) EffArea = 0.0735;
+           else if( fabs(eta) >= 0.8 && fabs(eta) < 1.3 ) EffArea = 0.0619;
+           else if( fabs(eta) >= 1.3 && fabs(eta) < 2.0 ) EffArea = 0.0465;
+           else if( fabs(eta) >= 2.0 && fabs(eta) < 2.2 ) EffArea = 0.0433;
+           else if( fabs(eta) >= 2.2 && fabs(eta) < 2.5 ) EffArea = 0.0577;
+           
+           float correction = ftree->ev_rho*EffArea*(miniIsoR/0.3)*(miniIsoR/0.3);
+           
+           miniIso = getPFIsolation(pfcands,dynamic_cast<const reco::Candidate*>(&muon),0.05,0.2,10.,false,false);
+           
+           float pfIsoCharged      = MuonPfIsoCharged(muon,pfcands,miniIsoR);
+           float pfIsoNeutral      = MuonPfIsoNeutral(muon,pfcands,miniIsoR);
+           float pfIsoPUSubtracted = std::max(float(0.0),float(pfIsoNeutral-correction));
+           
+           miniIsoTTH        = (pfIsoCharged + pfIsoPUSubtracted) / muon.pt();
+           miniIsoTTHCharged = pfIsoCharged;
+           //miniIsoTTHNeutral = pfIsoPUSubtracted;
+           miniIsoTTHNeutral = pfIsoNeutral;
+       }
+       
+       ftree->mu_miniIso.push_back(miniIso);
+       ftree->mu_miniIsoTTH.push_back(miniIsoTTH);
+
+       // https://twiki.cern.ch/twiki/bin/view/CMSPublic/WorkBookMuonAnalysis#Muon_identification
+       ftree->mu_isGoodMuon_AllGlobalMuons.push_back(muon::isGoodMuon(muon,muon::AllGlobalMuons));
+       ftree->mu_isGoodMuon_AllStandAloneMuons.push_back(muon::isGoodMuon(muon,muon::AllStandAloneMuons));
+       ftree->mu_isGoodMuon_AllTrackerMuons.push_back(muon::isGoodMuon(muon,muon::AllTrackerMuons));
+       ftree->mu_isGoodMuon_TrackerMuonArbitrated.push_back(muon::isGoodMuon(muon,muon::TrackerMuonArbitrated));
+       ftree->mu_isGoodMuon_AllArbitrated.push_back(muon::isGoodMuon(muon,muon::AllArbitrated));
+       ftree->mu_isGoodMuon_GlobalMuonPromptTight.push_back(muon::isGoodMuon(muon,muon::GlobalMuonPromptTight));
+       ftree->mu_isGoodMuon_TMLastStationLoose.push_back(muon::isGoodMuon(muon,muon::TMLastStationLoose));
+       ftree->mu_isGoodMuon_TMLastStationTight.push_back(muon::isGoodMuon(muon,muon::TMLastStationTight));
+       ftree->mu_isGoodMuon_TM2DCompatibilityLoose.push_back(muon::isGoodMuon(muon,muon::TM2DCompatibilityLoose));
+       ftree->mu_isGoodMuon_TM2DCompatibilityTight.push_back(muon::isGoodMuon(muon,muon::TM2DCompatibilityTight));
+       ftree->mu_isGoodMuon_TMOneStationLoose.push_back(muon::isGoodMuon(muon,muon::TMOneStationLoose));
+       ftree->mu_isGoodMuon_TMOneStationTight.push_back(muon::isGoodMuon(muon,muon::TMOneStationTight));
+       ftree->mu_isGoodMuon_TMLastStationOptimizedLowPtLoose.push_back(muon::isGoodMuon(muon,muon::TMLastStationOptimizedLowPtLoose));
+       ftree->mu_isGoodMuon_TMLastStationOptimizedLowPtTight.push_back(muon::isGoodMuon(muon,muon::TMLastStationOptimizedLowPtTight));
+       ftree->mu_isGoodMuon_GMTkChiCompatibility.push_back(muon::isGoodMuon(muon,muon::GMTkChiCompatibility));
+       ftree->mu_isGoodMuon_GMStaChiCompatibility.push_back(muon::isGoodMuon(muon,muon::GMStaChiCompatibility));
+       ftree->mu_isGoodMuon_GMTkKinkTight.push_back(muon::isGoodMuon(muon,muon::GMTkKinkTight));
+       ftree->mu_isGoodMuon_TMLastStationAngLoose.push_back(muon::isGoodMuon(muon,muon::TMLastStationAngLoose));
+       ftree->mu_isGoodMuon_TMLastStationAngTight.push_back(muon::isGoodMuon(muon,muon::TMLastStationAngTight));
+       ftree->mu_isGoodMuon_TMOneStationAngLoose.push_back(muon::isGoodMuon(muon,muon::TMOneStationAngLoose));
+       ftree->mu_isGoodMuon_TMOneStationAngTight.push_back(muon::isGoodMuon(muon,muon::TMOneStationAngTight));
+       ftree->mu_isGoodMuon_TMLastStationOptimizedBarrelLowPtLoose.push_back(muon::isGoodMuon(muon,muon::TMLastStationOptimizedBarrelLowPtLoose));
+       ftree->mu_isGoodMuon_TMLastStationOptimizedBarrelLowPtTight.push_back(muon::isGoodMuon(muon,muon::TMLastStationOptimizedBarrelLowPtTight));
+
+       bool energyIsValid = muon.isEnergyValid();
+       ftree->mu_calEnergy_em.push_back(energyIsValid ? muon.calEnergy().em : -666.);
+       ftree->mu_calEnergy_had.push_back(energyIsValid ? muon.calEnergy().had : -666.);
+       ftree->mu_calEnergy_ho.push_back(energyIsValid ? muon.calEnergy().ho : -666.);
+       ftree->mu_calEnergy_emS9.push_back(energyIsValid ? muon.calEnergy().emS9 : -666.);
+       ftree->mu_calEnergy_hadS9.push_back(energyIsValid ? muon.calEnergy().hadS9 : -666.);
+       ftree->mu_calEnergy_hoS9.push_back(energyIsValid ? muon.calEnergy().hoS9 : -666.);
+       ftree->mu_calEnergy_emS25.push_back(energyIsValid ? muon.calEnergy().emS25 : -666.);
+       ftree->mu_calEnergy_emMax.push_back(energyIsValid ? muon.calEnergy().emMax : -666.);
+       ftree->mu_calEnergy_hadMax.push_back(energyIsValid ? muon.calEnergy().hadMax : -666.);
+       ftree->mu_calEnergy_ecal_time.push_back(energyIsValid ? muon.calEnergy().ecal_time : -666.);
+       ftree->mu_calEnergy_hcal_time.push_back(energyIsValid ? muon.calEnergy().hcal_time : -666.);
+       ftree->mu_calEnergy_ecal_rawId.push_back(energyIsValid ? muon.calEnergy().ecal_id.rawId() : -666.);
+       ftree->mu_calEnergy_hcal_rawId.push_back(energyIsValid ? muon.calEnergy().hcal_id.rawId() : -666.);
+
+       bool isoIsValid = muon.isIsolationValid();
+
+       ftree->mu_isolationR03_trackerVetoPt.push_back(isoIsValid ? muon.isolationR03().trackerVetoPt : -666.);
+       ftree->mu_isolationR03_emVetoEt.push_back(isoIsValid ? muon.isolationR03().emVetoEt : -666.);
+       ftree->mu_isolationR03_hadVetoEt.push_back(isoIsValid ? muon.isolationR03().hadVetoEt : -666.);
+       ftree->mu_isolationR03_hoVetoEt.push_back(isoIsValid ? muon.isolationR03().hoVetoEt : -666.);
+       ftree->mu_isolationR03_sumPt.push_back(isoIsValid ? muon.isolationR03().sumPt : -666.);
+       ftree->mu_isolationR03_emEt.push_back(isoIsValid ? muon.isolationR03().emEt : -666.);
+       ftree->mu_isolationR03_hadEt.push_back(isoIsValid ? muon.isolationR03().hadEt : -666.);
+       ftree->mu_isolationR03_hoEt.push_back(isoIsValid ? muon.isolationR03().hoEt : -666.);
+       ftree->mu_isolationR03_nTracks.push_back(isoIsValid ? muon.isolationR03().nTracks : -666.);
+       ftree->mu_isolationR03_nJets.push_back(isoIsValid ? muon.isolationR03().nJets : -666.);
+
+       ftree->mu_isolationR05_trackerVetoPt.push_back(isoIsValid ? muon.isolationR05().trackerVetoPt : -666.);
+       ftree->mu_isolationR05_emVetoEt.push_back(isoIsValid ? muon.isolationR05().emVetoEt : -666.);
+       ftree->mu_isolationR05_hadVetoEt.push_back(isoIsValid ? muon.isolationR05().hadVetoEt : -666.);
+       ftree->mu_isolationR05_hoVetoEt.push_back(isoIsValid ? muon.isolationR05().hoVetoEt : -666.);
+       ftree->mu_isolationR05_sumPt.push_back(isoIsValid ? muon.isolationR05().sumPt : -666.);
+       ftree->mu_isolationR05_emEt.push_back(isoIsValid ? muon.isolationR05().emEt : -666.);
+       ftree->mu_isolationR05_hadEt.push_back(isoIsValid ? muon.isolationR05().hadEt : -666.);
+       ftree->mu_isolationR05_hoEt.push_back(isoIsValid ? muon.isolationR05().hoEt : -666.);
+       ftree->mu_isolationR05_nTracks.push_back(isoIsValid ? muon.isolationR05().nTracks : -666.);
+       ftree->mu_isolationR05_nJets.push_back(isoIsValid ? muon.isolationR05().nJets : -666.);
+
+       // ttH lepton MVA
+       double mu_pt = muon.pt();
+       double mu_eta = muon.eta();
+       double mu_phi = muon.phi();
+       double mu_lepMVA = -666.;
+
+       float drmin = 0.5;
+       int jcl = -1;
+       for(unsigned int ij=0;ij<jets->size();ij++)
+       {	     
+           if( jets->at(ij).pt() < 10. ) continue;
+           float dr = GetDeltaR(jets->at(ij).eta(),
+                   jets->at(ij).phi(),
+                   mu_eta,
+                   mu_phi);
+           if( dr < drmin )
+           {		  
+               drmin = dr;
+               jcl = ij;
+           }	     
+       }	
+
+       lepMVA_pt = mu_pt;
+       lepMVA_miniRelIsoNeutral = miniIsoTTHNeutral; //CAREFUL! WAS CHANGED TO MATCH GEOFF DEFINITION...
+       lepMVA_miniRelIsoCharged = miniIsoTTHCharged;
+       //lepMVA_jetPtRatio = (jcl >= 0) ? std::min(mu_pt/jets->at(jcl).pt(),1.5) : 1.5;
+       lepMVA_jetPtRatio = (jcl >= 0) ? ptRatioMuon(muon,jets->at(jcl)) : 1.5;
+       lepMVA_jetPtRelv2 = (jcl >= 0) ? ptRelMuon(muon,jets->at(jcl)) : 0.0;
+       float csv = (jcl >= 0) ? jets->at(jcl).bDiscriminator("pfCombinedInclusiveSecondaryVertexV2BJetTags") : -666;
+       lepMVA_jetBTagCSV = std::max(double(csv),0.);
+       lepMVA_sip3d = fabs(ftree->mu_ip3d.back()/ftree->mu_ip3dErr.back());
+       lepMVA_dxy = log(fabs(ftree->mu_innerTrack_PV_dxy.back()));
+       lepMVA_dz = log(fabs(ftree->mu_innerTrack_PV_dz.back()));
+       lepMVA_mvaId = ftree->mu_segmentCompatibility.back();
+
+       if( fabs(mu_eta) < 1.5 ) mu_lepMVA = mu_reader_b->EvaluateMVA("BDTG method");
+       else mu_lepMVA = mu_reader_e->EvaluateMVA("BDTG method");
+
+       ftree->mu_lepMVA.push_back(mu_lepMVA);
+
+       ftree->mu_lepMVA_pt.push_back(lepMVA_pt);
+       ftree->mu_lepMVA_miniRelIsoCharged.push_back(lepMVA_miniRelIsoCharged);
+       ftree->mu_lepMVA_miniRelIsoNeutral.push_back(lepMVA_miniRelIsoNeutral);
+       ftree->mu_lepMVA_jetPtRatio.push_back(lepMVA_jetPtRatio);
+       ftree->mu_lepMVA_jetPtRelv2.push_back(lepMVA_jetPtRelv2);
+       ftree->mu_lepMVA_jetBTagCSV.push_back(lepMVA_jetBTagCSV);
+       ftree->mu_lepMVA_sip3d.push_back(lepMVA_sip3d);
+       ftree->mu_lepMVA_dxy.push_back(lepMVA_dxy);
+       ftree->mu_lepMVA_dz.push_back(lepMVA_dz);
+       ftree->mu_lepMVA_mvaId.push_back(lepMVA_mvaId);
+
+       if( !isData_ )
+       {
+           // Internal matching
+           reco::GenParticle *genp = new reco::GenParticle();
+
+           float drmin;
+           bool hasMCMatch = mc_truth->doMatch(iEvent,iSetup,genParticlesHandle,genp,drmin,
+                   muon.pt(),muon.eta(),muon.phi(),muon.pdgId());
+           ftree->mu_hasMCMatch.push_back(hasMCMatch);
+           if( hasMCMatch )
+           {
+               ftree->mu_gen_pt.push_back(genp->pt());
+               ftree->mu_gen_eta.push_back(genp->eta());
+               ftree->mu_gen_phi.push_back(genp->phi());
+               ftree->mu_gen_m.push_back(genp->mass());
+               ftree->mu_gen_status.push_back(genp->status());
+               ftree->mu_gen_id.push_back(genp->pdgId());
+               ftree->mu_gen_charge.push_back(genp->charge());
+               ftree->mu_gen_dr.push_back(drmin);
+           }	     
+           else
+           {
+               ftree->mu_gen_pt.push_back(-666);
+               ftree->mu_gen_eta.push_back(-666);
+               ftree->mu_gen_phi.push_back(-666);
+               ftree->mu_gen_m.push_back(-666);
+               ftree->mu_gen_status.push_back(-666);
+               ftree->mu_gen_id.push_back(-666);
+               ftree->mu_gen_charge.push_back(-666);
+               ftree->mu_gen_dr.push_back(-666);
+           }	     
+           delete genp;
+
+           // PAT matching
+           const reco::GenParticle *genpPAT = muon.genParticle();
+           bool hasMCMatchPAT = (genpPAT != 0);
+           ftree->mu_hasMCMatchPAT.push_back(hasMCMatchPAT);
+           if( hasMCMatchPAT )
+           {
+               ftree->mu_genPAT_pt.push_back(genpPAT->pt());
+               ftree->mu_genPAT_eta.push_back(genpPAT->eta());
+               ftree->mu_genPAT_phi.push_back(genpPAT->phi());
+               ftree->mu_genPAT_m.push_back(genpPAT->mass());
+               ftree->mu_genPAT_status.push_back(genpPAT->status());
+               ftree->mu_genPAT_id.push_back(genpPAT->pdgId());
+               ftree->mu_genPAT_charge.push_back(genpPAT->charge());
+           }	     
+           else
+           {
+               ftree->mu_genPAT_pt.push_back(-666);
+               ftree->mu_genPAT_eta.push_back(-666);
+               ftree->mu_genPAT_phi.push_back(-666);
+               ftree->mu_genPAT_m.push_back(-666);
+               ftree->mu_genPAT_status.push_back(-666);
+               ftree->mu_genPAT_id.push_back(-666);
+               ftree->mu_genPAT_charge.push_back(-666);
+           }	     
+       }
+   }   
    ftree->mu_n = ftree->mu_pt.size();
 
    // Taus
 
    int nTau = taus->size();
    for(int it=0;it<nTau;it++)
-     {
-	const pat::Tau& tau = taus->at(it);
-	
-	// Skimming taus with pT < 5 GeV. (should do nothing for miniAOD where pT > 18 GeV is applied)
-	if (tau.pt() < 5) continue;
+   {
+       const pat::Tau& tau = taus->at(it);
+
+       // Skimming taus with pT < 5 GeV. (should do nothing for miniAOD where pT > 18 GeV is applied)
+       if (tau.pt() < 5) continue;
 
 	ftree->tau_pt.push_back(tau.pt());
 	ftree->tau_eta.push_back(tau.eta());
diff --git a/FlatTreeProducer/plugins/Helper.cc b/FlatTreeProducer/plugins/Helper.cc
index 82dacc8..f7595a6 100644
--- a/FlatTreeProducer/plugins/Helper.cc
+++ b/FlatTreeProducer/plugins/Helper.cc
@@ -1,299 +1,370 @@
 #include "IPHCFlatTree/FlatTreeProducer/interface/Helper.hh"
-
+#include <iostream>
 #include "TMath.h"
 
 namespace 
 {   
-   struct ByEta 
-     {	
-	bool operator()(const pat::PackedCandidate *c1, const pat::PackedCandidate *c2) const 
-	  {	     
-	     return c1->eta() < c2->eta();
-	  }	
-	bool operator()(float c1eta, const pat::PackedCandidate *c2) const 
-	  {	     
-	     return c1eta < c2->eta();
-	  }	
-	bool operator()(const pat::PackedCandidate *c1, float c2eta) const 
-	  {	     
-	     return c1->eta() < c2eta;
-	  }	
-     };
+    struct ByEta 
+    {	
+        bool operator()(const pat::PackedCandidate *c1, const pat::PackedCandidate *c2) const 
+        {	     
+            return c1->eta() < c2->eta();
+        }	
+        bool operator()(float c1eta, const pat::PackedCandidate *c2) const 
+        {	     
+            return c1eta < c2->eta();
+        }	
+        bool operator()(const pat::PackedCandidate *c1, float c2eta) const 
+        {	     
+            return c1->eta() < c2eta;
+        }	
+    };
 }
 
 float GetDeltaR(float eta1,float phi1,float eta2,float phi2)
 {
-   float DeltaPhi = TMath::Abs(phi2 - phi1);
-      if (DeltaPhi > 3.141593 ) DeltaPhi -= 2.*3.141593;
-   return TMath::Sqrt( (eta2-eta1)*(eta2-eta1) + DeltaPhi*DeltaPhi );
+    float DeltaPhi = TMath::Abs(phi2 - phi1);
+    if (DeltaPhi > 3.141593 ) DeltaPhi -= 2.*3.141593;
+    return TMath::Sqrt( (eta2-eta1)*(eta2-eta1) + DeltaPhi*DeltaPhi );
 }
 
 // part of miniIso for ttH
 float isoSumRaw(const std::vector<const pat::PackedCandidate *> & cands, const reco::Candidate &cand, float dR, float innerR, float threshold, SelfVetoPolicy::SelfVetoPolicy selfVeto, int pdgId)
 {
-   std::vector<const reco::Candidate *> vetos_;
-   
-   float dR2 = dR*dR, innerR2 = innerR*innerR;
-   
-   std::vector<const reco::Candidate *> vetos(vetos_);
-   for( unsigned int i=0,n=cand.numberOfSourceCandidatePtrs();i<n;++i )
-     {
-	if(selfVeto == SelfVetoPolicy::selfVetoNone) break;
-	const reco::CandidatePtr &cp = cand.sourceCandidatePtr(i);
-	if( cp.isNonnull() && cp.isAvailable() )
-	  {
-	     vetos.push_back(&*cp);
-	     if (selfVeto == SelfVetoPolicy::selfVetoFirst) break;
-	  }
-     }   
-   
-   typedef std::vector<const pat::PackedCandidate *>::const_iterator IT;
-   IT candsbegin = std::lower_bound(cands.begin(), cands.end(), cand.eta() - dR, ByEta());
-   IT candsend = std::upper_bound(candsbegin, cands.end(), cand.eta() + dR, ByEta());
-   
-   double isosum = 0;
-   for( IT icharged=candsbegin;icharged<candsend;++icharged )
-     {
-	// pdgId
-	if( pdgId > 0 && abs((*icharged)->pdgId()) != pdgId ) continue;
-	// threshold
-	if( threshold > 0 && (*icharged)->pt() < threshold ) continue;
-	// cone
-	float mydr2 = reco::deltaR2(**icharged, cand);
-	if( mydr2 >= dR2 || mydr2 < innerR2 ) continue;
-	// veto
-	if( std::find(vetos.begin(), vetos.end(), *icharged) != vetos.end() )
-	  {
-	     continue;	     
-	  }
-	// add to sum
-	isosum += (*icharged)->pt();
-     }
-   return isosum;
+    std::vector<const reco::Candidate *> vetos_;
+
+    /*for (unsigned int i = 0, n = cand.numberOfSourceCandidatePtrs(); i < n; ++i) {
+        const reco::CandidatePtr &cp = cand.sourceCandidatePtr(i);
+        if (cp.isNonnull() && cp.isAvailable()) vetos_.push_back(&*cp);
+    }*/
+
+    float dR2 = dR*dR, innerR2 = innerR*innerR;
+
+    std::vector<const reco::Candidate *> vetos(vetos_);
+    for( unsigned int i=0,n=cand.numberOfSourceCandidatePtrs();i<n;++i )
+    {
+        if(selfVeto == SelfVetoPolicy::selfVetoNone) break;
+        const reco::CandidatePtr &cp = cand.sourceCandidatePtr(i);
+        if( cp.isNonnull() && cp.isAvailable() )
+        {
+            vetos.push_back(&*cp);
+            if (selfVeto == SelfVetoPolicy::selfVetoFirst) break;
+        }
+    }   
+
+    typedef std::vector<const pat::PackedCandidate *>::const_iterator IT;
+    IT candsbegin = std::lower_bound(cands.begin(), cands.end(), cand.eta() - dR, ByEta());
+    IT candsend = std::upper_bound(candsbegin, cands.end(), cand.eta() + dR, ByEta());
+
+    double isosum = 0;
+    for( IT icharged=candsbegin;icharged<candsend;++icharged )
+    {
+        // pdgId
+        if( pdgId > 0 && abs((*icharged)->pdgId()) != pdgId ) continue;
+        // threshold
+        if( threshold > 0 && (*icharged)->pt() < threshold ) continue;
+        // cone
+        float mydr2 = reco::deltaR2(**icharged, cand);
+        if( mydr2 >= dR2 || mydr2 < innerR2 ) continue;
+        // veto
+        if( std::find(vetos.begin(), vetos.end(), *icharged) != vetos.end() )
+        {
+            continue;	     
+        }
+        // add to sum
+        isosum += (*icharged)->pt();
+    }
+    return isosum;
 }
 
+// #############
+// # Electrons #
+// #############
+
 float ElecPfIsoCharged(const pat::Electron& elec,edm::Handle<pat::PackedCandidateCollection> pfcands,float miniIsoR)
 {
-   std::vector<const pat::PackedCandidate *> charged;
-   
-   for( const pat::PackedCandidate &p : *pfcands )
-     {
-	if( p.charge() != 0 )
-	  {
-	     if( abs(p.pdgId()) == 211 )
-	       {
-		  if (p.fromPV() > 1 && fabs(p.dz()) < 9999. )
-		    {
-		       charged.push_back(&p);
-		    }		  
-	       }	     
-	  }	
-     }   
-	
-   return isoSumRaw(charged,elec,miniIsoR,0.0001,0.0,SelfVetoPolicy::selfVetoAll);
+    std::vector<const pat::PackedCandidate *> charged;
+
+    for( const pat::PackedCandidate &p : *pfcands )
+    {
+        if( p.charge() != 0 )
+        {
+            if( fabs(p.pdgId()) == 211 )
+            {
+                if (p.fromPV() > 1 && fabs(p.dz()) < 9999. )
+                {
+                    charged.push_back(&p);
+                }		  
+            }	     
+        }	
+    }   
+
+    std::sort(charged.begin(), charged.end(), ByEta());
+
+    float innerR_Ch = .0;
+    if ( fabs(elec.eta()) < 1.479 ) { innerR_Ch = 0.0; }
+    else { innerR_Ch = 0.015; }
+
+    float result = isoSumRaw(charged,elec,miniIsoR,innerR_Ch,0.0,SelfVetoPolicy::selfVetoNone);
+
+    //std::cout << " ========= ElecPFIsoNeutral ======== " << std::endl
+    //          << "Eta :      " << fabs(elec.eta())  << std::endl
+    //          << "innerR_Ch: " << innerR_Ch         << std::endl
+    //          << "result:    " << result            << std::endl;
+
+    return result;
 }
 
-float MuonPfIsoCharged(const pat::Muon& muon,edm::Handle<pat::PackedCandidateCollection> pfcands,float miniIsoR)
+float ElecPfIsoNeutral(const pat::Electron& elec,edm::Handle<pat::PackedCandidateCollection> pfcands,float miniIsoR)
 {
-   std::vector<const pat::PackedCandidate *> charged;
-   
-   for( const pat::PackedCandidate &p : *pfcands )
-     {
-	if( p.charge() != 0 )
-	  {
-	     if( abs(p.pdgId()) == 211 )
-	       {
-		  if (p.fromPV() > 1 && fabs(p.dz()) < 9999. )
-		    {
-		       charged.push_back(&p);
-		    }		  
-	       }	     
-	  }	
-     }   
-	
-   return isoSumRaw(charged,muon,miniIsoR,0.0001,0.0,SelfVetoPolicy::selfVetoAll);
+    std::vector<const pat::PackedCandidate *> neutral;
+
+    for( const pat::PackedCandidate &p : *pfcands )
+    {
+        if( p.charge() == 0 )
+        {
+            neutral.push_back(&p);
+        }
+    }
+
+    std::sort(neutral.begin(), neutral.end(), ByEta());
+
+    float innerR_N = .0;
+    if ( fabs(elec.eta()) < 1.479 ) { innerR_N = 0.0; }
+    else { innerR_N = 0.08; }
+    
+    float result1 = isoSumRaw(neutral,elec,miniIsoR,innerR_N,0.0,SelfVetoPolicy::selfVetoNone,22 );
+    float result2 = isoSumRaw(neutral,elec,miniIsoR,0.0     ,0.0,SelfVetoPolicy::selfVetoNone,130);
+    float result = result1 + result2;
+
+    //std::cout << " ========= ElecPFIsoNeutral ======== " << std::endl
+    //          << "Eta :     " << fabs(elec.eta()) << std::endl
+    //          << "innerR_N: " << innerR_N         << std::endl    
+    //          << "result1:  " << result1          << std::endl
+    //          << "result2:  " << result2          << std::endl
+    //          << "result:   " << result           << std::endl;
+
+
+    return result;
 }
 
-float ElecPfIsoNeutral(const pat::Electron& elec,edm::Handle<pat::PackedCandidateCollection> pfcands,float miniIsoR)
+// #########
+// # Muons #
+// #########
+
+float MuonPfIsoCharged(const pat::Muon& muon,edm::Handle<pat::PackedCandidateCollection> pfcands,float miniIsoR)
 {
-   std::vector<const pat::PackedCandidate *> neutral;
-   
-   for( const pat::PackedCandidate &p : *pfcands )
-     {
-	if( p.charge() == 0 )
-	  {
-	     neutral.push_back(&p);
-	  }
-     }   
-   
-   return isoSumRaw(neutral,elec,miniIsoR,0.01,0.5,SelfVetoPolicy::selfVetoAll);
+    std::vector<const pat::PackedCandidate *> charged;
+
+    for( const pat::PackedCandidate &p : *pfcands )
+    {
+        if( p.charge() != 0 )
+        {
+            if( fabs(p.pdgId()) == 211 )
+            {
+                if (p.fromPV() > 1 && fabs(p.dz()) < 9999. )
+                {
+                    charged.push_back(&p);
+                }		  
+            }	     
+        }	
+    }
+
+    std::sort(charged.begin(), charged.end(), ByEta());
+
+    return isoSumRaw(charged,muon,miniIsoR,0.0001,0.0,SelfVetoPolicy::selfVetoAll);
 }
 
 float MuonPfIsoNeutral(const pat::Muon& muon,edm::Handle<pat::PackedCandidateCollection> pfcands,float miniIsoR)
 {
-   std::vector<const pat::PackedCandidate *> neutral;
-   
-   for( const pat::PackedCandidate &p : *pfcands )
-     {
-	if( p.charge() == 0 )
-	  {
-	     neutral.push_back(&p);
-	  }
-     }   
-   
-   return isoSumRaw(neutral,muon,miniIsoR,0.01,0.5,SelfVetoPolicy::selfVetoAll);
+    std::vector<const pat::PackedCandidate *> neutral;
+
+    for( const pat::PackedCandidate &p : *pfcands )
+    {
+        if( p.charge() == 0 )
+        {
+            neutral.push_back(&p);
+        }
+    }   
+
+    std::sort(neutral.begin(), neutral.end(), ByEta());
+
+    return isoSumRaw(neutral,muon,miniIsoR,0.01,0.5,SelfVetoPolicy::selfVetoAll);
 }
 
 // https://twiki.cern.ch/twiki/bin/view/CMS/MiniIsolationSUSY
 // https://github.com/manuelfs/CfANtupler/blob/master/minicfa/interface/miniAdHocNTupler.h
 double getPFIsolation(edm::Handle<pat::PackedCandidateCollection> pfcands,
-		      const reco::Candidate* ptcl,
-		      double r_iso_min, double r_iso_max, double kt_scale,
-		      bool use_pfweight, bool charged_only) 
+        const reco::Candidate* ptcl,
+        double r_iso_min, double r_iso_max, double kt_scale,
+        bool use_pfweight, bool charged_only) 
 {
-   if (ptcl->pt()<5.) return 99999.;
-   double deadcone_nh(0.), deadcone_ch(0.), deadcone_ph(0.), deadcone_pu(0.);
-   if(ptcl->isElectron()) 
-     {	
-	if (fabs(ptcl->eta())>1.479) 
-	  {
-	     deadcone_ch = 0.015; deadcone_pu = 0.015; deadcone_ph = 0.08;
-	  }	
-     }
+    if (ptcl->pt()<5.) return 99999.;
+    double deadcone_nh(0.), deadcone_ch(0.), deadcone_ph(0.), deadcone_pu(0.);
+    if(ptcl->isElectron()) 
+    {	
+        if (fabs(ptcl->eta())>1.479) 
+        {
+            deadcone_ch = 0.015; deadcone_pu = 0.015; deadcone_ph = 0.08;
+        }	
+    }
     else if(ptcl->isMuon()) 
-     {	
-	deadcone_ch = 0.0001; deadcone_pu = 0.01; deadcone_ph = 0.01;deadcone_nh = 0.01;
-     }
+    {	
+        deadcone_ch = 0.0001; deadcone_pu = 0.01; deadcone_ph = 0.01;deadcone_nh = 0.01;
+    }
     else 
-     {	
-	//deadcone_ch = 0.0001; deadcone_pu = 0.01; deadcone_ph = 0.01;deadcone_nh = 0.01; // maybe use muon cones??
-     }
-   
-   double iso_nh(0.); double iso_ch(0.);
-   double iso_ph(0.); double iso_pu(0.);
-   double ptThresh(0.5);
-   if(ptcl->isElectron()) ptThresh = 0;
-   double r_iso = std::max(r_iso_min,std::min(r_iso_max, kt_scale/ptcl->pt()));
-   for (const pat::PackedCandidate &pfc : *pfcands)
-     {	
-	if (abs(pfc.pdgId())<7) continue;
-	double dr = deltaR(pfc, *ptcl);
-	if (dr > r_iso) continue;
-	////////////////// NEUTRALS /////////////////////////
-	if (pfc.charge()==0)
-	  {	     
-	     if (pfc.pt()>ptThresh) 
-	       {		  
-		  double wpf(1.);
-		  if (use_pfweight)
-		    {		       
-		       double wpv(0.), wpu(0.);
-		       for (const pat::PackedCandidate &jpfc : *pfcands) 
-			 {			    
-			    double jdr = deltaR(pfc, jpfc);
-			    if (pfc.charge()!=0 || jdr<0.00001) continue;
-			    double jpt = jpfc.pt();
-			    if (pfc.fromPV()>1) wpv *= jpt/jdr;
-			    else wpu *= jpt/jdr;
-			 }
-		       
-		       wpv = log(wpv);
-		       wpu = log(wpu);
-		       wpf = wpv/(wpv+wpu);
-		    }
-		  
-		  /////////// PHOTONS ////////////
-		  if (abs(pfc.pdgId())==22) 
-		    {		       
-		       if(dr < deadcone_ph) continue;
-		       iso_ph += wpf*pfc.pt();
-		       /////////// NEUTRAL HADRONS ////////////
-		    }
-		   else if (abs(pfc.pdgId())==130) 
-		    {		       
-		       if(dr < deadcone_nh) continue;
-		       iso_nh += wpf*pfc.pt();
-		    }		  
-	       }	     
-	     ////////////////// CHARGED from PV /////////////////////////
-	  }
-	 else if (pfc.fromPV()>1)
-	  {	     
-	     if (abs(pfc.pdgId())==211) 
-	       {		  
-		  if(dr < deadcone_ch) continue;
-		  iso_ch += pfc.pt();
-	       }
-	     
-	     ////////////////// CHARGED from PU /////////////////////////
-	  }
-	 else 
-	  {	     
-	     if (pfc.pt()>ptThresh)
-	       {		  
-		  if(dr < deadcone_pu) continue;
-		  iso_pu += pfc.pt();
-	       }	     
-	  }	
-     }
-   
-   double iso(0.);
-   if (charged_only)
-     {	
-	iso = iso_ch;
-     }
+    {	
+        //deadcone_ch = 0.0001; deadcone_pu = 0.01; deadcone_ph = 0.01;deadcone_nh = 0.01; // maybe use muon cones??
+    }
+
+    double iso_nh(0.); double iso_ch(0.);
+    double iso_ph(0.); double iso_pu(0.);
+    double ptThresh(0.5);
+    if(ptcl->isElectron()) ptThresh = 0;
+    double r_iso = std::max(r_iso_min,std::min(r_iso_max, kt_scale/ptcl->pt()));
+    for (const pat::PackedCandidate &pfc : *pfcands)
+    {	
+        if (abs(pfc.pdgId())<7) continue;
+        double dr = deltaR(pfc, *ptcl);
+        if (dr > r_iso) continue;
+        ////////////////// NEUTRALS /////////////////////////
+        if (pfc.charge()==0)
+        {	     
+            if (pfc.pt()>ptThresh) 
+            {		  
+                double wpf(1.);
+                if (use_pfweight)
+                {		       
+                    double wpv(0.), wpu(0.);
+                    for (const pat::PackedCandidate &jpfc : *pfcands) 
+                    {			    
+                        double jdr = deltaR(pfc, jpfc);
+                        if (pfc.charge()!=0 || jdr<0.00001) continue;
+                        double jpt = jpfc.pt();
+                        if (pfc.fromPV()>1) wpv *= jpt/jdr;
+                        else wpu *= jpt/jdr;
+                    }
+
+                    wpv = log(wpv);
+                    wpu = log(wpu);
+                    wpf = wpv/(wpv+wpu);
+                }
+
+                /////////// PHOTONS ////////////
+                if (abs(pfc.pdgId())==22) 
+                {		       
+                    if(dr < deadcone_ph) continue;
+                    iso_ph += wpf*pfc.pt();
+                    /////////// NEUTRAL HADRONS ////////////
+                }
+                else if (abs(pfc.pdgId())==130) 
+                {		       
+                    if(dr < deadcone_nh) continue;
+                    iso_nh += wpf*pfc.pt();
+                }		  
+            }	     
+            ////////////////// CHARGED from PV /////////////////////////
+        }
+        else if (pfc.fromPV()>1)
+        {	     
+            if (abs(pfc.pdgId())==211) 
+            {		  
+                if(dr < deadcone_ch) continue;
+                iso_ch += pfc.pt();
+            }
+
+            ////////////////// CHARGED from PU /////////////////////////
+        }
+        else 
+        {	     
+            if (pfc.pt()>ptThresh)
+            {		  
+                if(dr < deadcone_pu) continue;
+                iso_pu += pfc.pt();
+            }	     
+        }	
+    }
+
+    double iso(0.);
+    if (charged_only)
+    {	
+        iso = iso_ch;
+    }
     else 
-     {	
-	iso = iso_ph + iso_nh;
-	if (!use_pfweight) iso -= 0.5*iso_pu;
-	if (iso>0) iso += iso_ch;
-	else iso = iso_ch;
-     }
-   
-   iso = iso/ptcl->pt();
-   return iso;
+    {	
+        iso = iso_ph + iso_nh;
+        if (!use_pfweight) iso -= 0.5*iso_pu;
+        if (iso>0) iso += iso_ch;
+        else iso = iso_ch;
+    }
+
+    iso = iso/ptcl->pt();
+    return iso;
 }
 
 float ptRelElec(const pat::Electron& elec,const pat::Jet& jet)
 {
-   float j_x = jet.px()+elec.px();
-   float j_y = jet.py()+elec.py();
-   float j_z = jet.pz()+elec.pz();
-
-   float l_x = elec.px();
-   float l_y = elec.py();
-   float l_z = elec.pz();
-   
-   float j2 = j_x*j_x+j_y*j_y+j_z*j_z;
-   float l2 = l_x*l_x+l_y*l_y+l_z*l_z;
-   
-   float lXj = l_x*j_x+l_y*j_y+l_z*j_z;
-   
-   float pLrel2 = lXj*lXj/j2;
-   
-   float pTrel2 = l2-pLrel2;
-   
-   return (pTrel2 > 0) ? std::sqrt(pTrel2) : 0.0;
+    float j_x = jet.px()+elec.px();
+    float j_y = jet.py()+elec.py();
+    float j_z = jet.pz()+elec.pz();
+
+    float l_x = elec.px();
+    float l_y = elec.py();
+    float l_z = elec.pz();
+
+    float j2 = j_x*j_x+j_y*j_y+j_z*j_z;
+    float l2 = l_x*l_x+l_y*l_y+l_z*l_z;
+
+    float lXj = l_x*j_x+l_y*j_y+l_z*j_z;
+
+    float pLrel2 = lXj*lXj/j2;
+
+    float pTrel2 = l2-pLrel2;
+
+    return (pTrel2 > 0) ? std::sqrt(pTrel2) : 0.0;
+}
+
+float ptRatioMuon(const pat::Muon& muon,const pat::Jet& jet)
+{
+    float j_x = jet.px();//-muon.px();
+    float j_y = jet.py();//-muon.py();
+    float j_z = jet.pz();//-muon.pz();
+
+    float l_x = muon.px();
+    float l_y = muon.py();
+    float l_z = muon.pz();
+
+    float j2 = j_x*j_x+j_y*j_y+j_z*j_z;
+    float l2 = l_x*l_x+l_y*l_y+l_z*l_z;
+
+    float lXj = l_x*j_x+l_y*j_y+l_z*j_z;
+
+    float pLrel2 = lXj*lXj/j2;
+
+    float pTrel2 = l2-pLrel2;
+
+    return (pTrel2 > 0) ? std::sqrt(pTrel2) : 0.0;
 }
 
 float ptRelMuon(const pat::Muon& muon,const pat::Jet& jet)
 {
-   float j_x = jet.px()+muon.px();
-   float j_y = jet.py()+muon.py();
-   float j_z = jet.pz()+muon.pz();
-
-   float l_x = muon.px();
-   float l_y = muon.py();
-   float l_z = muon.pz();
-   
-   float j2 = j_x*j_x+j_y*j_y+j_z*j_z;
-   float l2 = l_x*l_x+l_y*l_y+l_z*l_z;
-   
-   float lXj = l_x*j_x+l_y*j_y+l_z*j_z;
-   
-   float pLrel2 = lXj*lXj/j2;
-   
-   float pTrel2 = l2-pLrel2;
-   
-   return (pTrel2 > 0) ? std::sqrt(pTrel2) : 0.0;
+    float j_x = jet.px();//-muon.px();
+    float j_y = jet.py();//-muon.py();
+    float j_z = jet.pz();//-muon.pz();
+
+    float l_x = muon.px();
+    float l_y = muon.py();
+    float l_z = muon.pz();
+
+    float j2 = j_x*j_x+j_y*j_y+j_z*j_z;
+    float l2 = l_x*l_x+l_y*l_y+l_z*l_z;
+
+    float lXj = l_x*j_x+l_y*j_y+l_z*j_z;
+
+    float pLrel2 = lXj*lXj/j2;
+
+    float pTrel2 = l2-pLrel2;
+
+    return (pTrel2 > 0) ? std::sqrt(pTrel2) : 0.0;
 }
+
diff --git a/FlatTreeProducer/python/CfiFile_cfi.pyc b/FlatTreeProducer/python/CfiFile_cfi.pyc
new file mode 100644
index 0000000..d0b69b4
Binary files /dev/null and b/FlatTreeProducer/python/CfiFile_cfi.pyc differ
diff --git a/FlatTreeProducer/python/ConfFile_AOD_cfg.pyc b/FlatTreeProducer/python/ConfFile_AOD_cfg.pyc
new file mode 100644
index 0000000..89047b3
Binary files /dev/null and b/FlatTreeProducer/python/ConfFile_AOD_cfg.pyc differ
diff --git a/FlatTreeProducer/python/ConfFile_MINIAOD_cfg.py b/FlatTreeProducer/python/ConfFile_MINIAOD_cfg.py
index dd25d1a..187b36d 100644
--- a/FlatTreeProducer/python/ConfFile_MINIAOD_cfg.py
+++ b/FlatTreeProducer/python/ConfFile_MINIAOD_cfg.py
@@ -337,12 +337,8 @@ process.QGTagger.jetsLabel        = cms.string('QGL_AK4PFchs') # Other options:
 process.source = cms.Source("PoolSource",
     duplicateCheckMode = cms.untracked.string("noDuplicateCheck"), # WARNING / FIXME for test only !
     fileNames = cms.untracked.vstring(
-#    'root://sbgse1.in2p3.fr//dpm/in2p3.fr/home/cms/phedex/store/user/kskovpen/ttH/testFiles/MiniAOD/ttH_ev_2.root'
-#    'file:088378DB-3D24-E511-8B0E-20CF3027A589.root'
-    'file:data.root'
-        #'/store/mc/Phys14DR/WZJetsTo3LNu_Tune4C_13TeV-madgraph-tauola/MINIAODSIM/PU20bx25_PHYS14_25_V1-v1/00000/484D51C6-2673-E411-8AB0-001E67398412.root'
-#        'root://sbgse1.in2p3.fr//dpm/in2p3.fr/home/cms/phedex/store/user/kskovpen/ttH/testFiles/MiniAOD/ttH_ev_2.root'
-    )
+            '/store/mc/RunIISpring15MiniAODv2/ttHToNonbb_M125_13TeV_powheg_pythia8/MINIAODSIM/74X_mcRun2_asymptotic_v2-v1/10000/02FE2DB6-D06D-E511-8BC7-0025905C431C.root'
+            )
 )
 
 ############
@@ -508,8 +504,8 @@ process.FlatTree = cms.EDAnalyzer('FlatTreeProducer',
 if not options.isData:
     if options.runBTag:
         process.p = cms.Path(
-        process.HBHENoiseFilterResultProducer+
-        process.ApplyBaselineHBHENoiseFilter+
+        #process.HBHENoiseFilterResultProducer+
+        #process.ApplyBaselineHBHENoiseFilter+
         process.electronMVAValueMapProducer+
         process.egmGsfElectronIDSequence+
         process.METSignificance+
@@ -518,8 +514,8 @@ if not options.isData:
         process.FlatTree)
     else:
         process.p = cms.Path(
-        process.HBHENoiseFilterResultProducer+
-        process.ApplyBaselineHBHENoiseFilter+
+        #process.HBHENoiseFilterResultProducer+
+        #process.ApplyBaselineHBHENoiseFilter+
         process.electronMVAValueMapProducer+
         process.egmGsfElectronIDSequence+
 #        process.genJetFlavourAlg+
@@ -530,8 +526,8 @@ if not options.isData:
 else:
     if options.runBTag:
         process.p = cms.Path(
-        process.HBHENoiseFilterResultProducer+
-        process.ApplyBaselineHBHENoiseFilter+
+        #process.HBHENoiseFilterResultProducer+
+        #process.ApplyBaselineHBHENoiseFilter+
         process.electronMVAValueMapProducer+
         process.egmGsfElectronIDSequence+
         process.METSignificance+
@@ -540,8 +536,8 @@ else:
         process.FlatTree)
     else:
         process.p = cms.Path(
-        process.HBHENoiseFilterResultProducer+
-        process.ApplyBaselineHBHENoiseFilter+
+        #process.HBHENoiseFilterResultProducer+
+        #process.ApplyBaselineHBHENoiseFilter+
         process.electronMVAValueMapProducer+
         process.egmGsfElectronIDSequence+
         process.patJetCorrFactorsReapplyJEC+process.patJetsReapplyJEC+
diff --git a/FlatTreeProducer/python/ConfFile_MINIAOD_cfg.pyc b/FlatTreeProducer/python/ConfFile_MINIAOD_cfg.pyc
new file mode 100644
index 0000000..47a9957
Binary files /dev/null and b/FlatTreeProducer/python/ConfFile_MINIAOD_cfg.pyc differ
diff --git a/FlatTreeProducer/python/__init__.pyc b/FlatTreeProducer/python/__init__.pyc
new file mode 100644
index 0000000..bfd521c
Binary files /dev/null and b/FlatTreeProducer/python/__init__.pyc differ
diff --git a/FlatTreeProducer/python/genJetFlavorMatching.pyc b/FlatTreeProducer/python/genJetFlavorMatching.pyc
new file mode 100644
index 0000000..3127cd3
Binary files /dev/null and b/FlatTreeProducer/python/genJetFlavorMatching.pyc differ
diff --git a/FlatTreeProducer/test/runFlatTreeMINIAOD_cfg.py b/FlatTreeProducer/test/runFlatTreeMINIAOD_cfg.py
index 9b08fd2..30f6794 100644
--- a/FlatTreeProducer/test/runFlatTreeMINIAOD_cfg.py
+++ b/FlatTreeProducer/test/runFlatTreeMINIAOD_cfg.py
@@ -1,3 +1,3 @@
 from IPHCFlatTree.FlatTreeProducer.ConfFile_MINIAOD_cfg import *
-#process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(1000) )
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(-1) )
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(1000) )
+#process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(-1) )
